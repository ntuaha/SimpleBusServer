as.POSIXct
as.POSIXct(Sys.time())
as.POSIXlt(Sys.time())
show
show.POSIXct
POSIXct
print.POSIXct
temp <- Sys.time()
class(temp)
?DateTimeClass
?Date-Time
?DateTimeClass
??DateTimeClass
base::DateTimeClass
Sys.time()
temp
temp@tzone
attr(temp, "tzone")
str(temp)
as.POSIXlt(temp)
temp2 <- as.POSIXlt(temp)
str(temp2)
attr(temp2, "tzone")
file.info(dir())
file.info(dir())[, "mtime", drop=FALSE]
file_time <- file.info(dir())[, "mtime", drop=FALSE]
file_time
format(file_time, format="%x %X")
ISOdate(2001, 2, 26)
y
y.time
y.time <- trunc(car[,"datatime"], unit="hour")
y.time
y.time <- trunc(car[,"datatime"], unit="hours")
y.time
y.time <- trunc(car[,"datatime"], unit="minutes")
y.time <- trunc(car[,"datatime"], unit="mins")
y.time
?trunc.POSIXt
y.time <- round(car[,"datatime"], unit="mins")
y.time
?format.POSIXct
?strptime
format(y.time, "%H %M")
y.time <- car[,"datatime"]
y.time
y.hour <- format(y.time, "%H")
y.min <- format(y.time, "%m")
y.min <- format(y.time, "%M")
y.hour <- as.integer(format(y.time, "%H"))
y.min <- as.integer(format(y.time, "%M"))
y.hour
y.min
y.date <- as.integer(format(y.time, "%d"))
y.date
which(sum(y.hour == 2:4) > 0)
y.hour
belong
sapply(y.hour, function(a) sum(a == 1:4)
)
which(sapply(y.hour, function(a) sum(a == 1:4)) > 0)
rest.index <- which(sapply(y.hour, function(a) sum(a == 1:4)) > 0)
y[,rest.index]
y[rest.index,]
plot(y[rest.index,])
y.dat[rest.index,]
y.date[rest.index,]
y.date[rest.index]
?tapply
source('~/.active-rstudio-document', echo=TRUE)
y[rest.index,]
y.date[rest.index]
tapply(y[rest.index,1], y.date[rest.index], mean)
plot(tapply(y[rest.index,1], y.date[rest.index], mean))
table(y.date[rest.index])
tapply(y[rest.index,1], y.date[rest.index], var)
plot(tapply(y[rest.index,1], y.date[rest.index], var),type="h")
plot(tapply(y[rest.index,2], y.date[rest.index], var), type="h")
mean(y)
colMeans(y)
colMeans(y)[2]
cos(colMeans(y)[2])
cos(colMeans(y)[2] / 180)
cos(pi * colMeans(y)[2] / 180)
cos(pi * 90 / 180)
{ # loading libraries
library(Rinclude)
library(sp)
#   library(outliers)
library(vegan) # clustering
}
{ # parameter setting
car_id <- 976
path_threshold <- 10
}
include("loadData.R", local=.GlobalEnv)
include("loadData.R", local=.GlobalEnv)
include("loadData.R", local=.GlobalEnv)
include
is.logical
is.logical(.GlobalEnv)
include("loadData.R", local=.GlobalEnv)
Rinclude
include
.GlobalEnv
include("loadData.R", local=.GlobalEnv)
include("loadData.R", local=2L)
.GlobalEnv
include("loadData.R", local=.GlobalEnv)
is.logical(.GlobalEnv)
include <- function (path, relative = TRUE, local = FALSE, current_environment = environment())
{
show(current_environment)
path <- file.path(path, fsep = "/")
path_split <- strsplit(x = path, split = "/", fixed = TRUE)[[1]]
if (length(path_split) == 1) {
path_dir <- "."
}
else {
path_dir <- paste(path_split[-length(path_split)], collapse = "/")
}
path_file <- path_split[length(path_split)]
origin_wd <- getwd()
setwd(path_dir)
if (is.logical(local)) {
if (local) {
user_environment <- .GlobalEnv
}
else {
user_environment <- parent.env(current_environment)
}
}
else if (is.environment(local)) {
user_environment <- local
}
else {
stop("argument \"local\" should be either environment or logical")
}
show(user_environment)
source(path_file, local = user_environment)
setwd(origin_wd)
}
include("loadData.R", local=.GlobalEnv)
path <- "loadData.R"
local <- .GlobalEnv
show(current_environment)
path <- file.path(path, fsep = "/")
path_split <- strsplit(x = path, split = "/", fixed = TRUE)[[1]]
if (length(path_split) == 1) {
path_dir <- "."
}
else {
path_dir <- paste(path_split[-length(path_split)], collapse = "/")
}
path_file <- path_split[length(path_split)]
path <- file.path(path, fsep = "/")
path <- "loadData.R"
path <- file.path(path, fsep = "/")
path_split <- strsplit(x = path, split = "/", fixed = TRUE)[[1]]
if (length(path_split) == 1) {
path_dir <- "."
}
else {
path_dir <- paste(path_split[-length(path_split)], collapse = "/")
}
path <- "loadData.R"
path <- file.path(path, fsep = "/")
path_split <- strsplit(x = path, split = "/", fixed = TRUE)[[1]]
if (length(path_split) == 1) {
path_dir <- "."
} else {
path_dir <- paste(path_split[-length(path_split)], collapse = "/")
}
path_file <- path_split[length(path_split)]
origin_wd <- getwd()
setwd(path_dir)
is.logical(local)
if (is.logical(local)) {
if (local) {
user_environment <- .GlobalEnv
}
else {
user_environment <- parent.env(current_environment)
}
}
else if (is.environment(local)) {
user_environment <- local
}
else {
stop("argument \"local\" should be either environment or logical")
}
if (is.logical(local)) {
if (local) {
user_environment <- .GlobalEnv
} else {
user_environment <- parent.env(current_environment)
}
} else if (is.environment(local)) {
user_environment <- local
} else {
stop("argument \"local\" should be either environment or logical")
}
path <- "loadData.R"
local <- .GlobalEnv
include <- function (path, relative = TRUE, local = FALSE, current_environment = environment())
{
show(current_environment)
path <- file.path(path, fsep = "/")
path_split <- strsplit(x = path, split = "/", fixed = TRUE)[[1]]
if (length(path_split) == 1) {
path_dir <- "."
} else {
path_dir <- paste(path_split[-length(path_split)], collapse = "/")
}
path_file <- path_split[length(path_split)]
origin_wd <- getwd()
setwd(path_dir)
if (is.logical(local)) {
if (local) {
user_environment <- .GlobalEnv
} else {
user_environment <- parent.env(current_environment)
}
} else if (is.environment(local)) {
user_environment <- local
} else {
stop("argument \"local\" should be either environment or logical")
}
show(user_environment)
source(path_file, local = user_environment)
setwd(origin_wd)
}
include("loadData.R", local=.GlobalEnv)
local <- .GlobalEnv
local <- .GlobalEnv
path <- "loadData.R"
show(current_environment)
path <- file.path(path, fsep = "/")
path_split <- strsplit(x = path, split = "/", fixed = TRUE)[[1]]
if (length(path_split) == 1) {
path_dir <- "."
} else {
path_dir <- paste(path_split[-length(path_split)], collapse = "/")
}
path_file <- path_split[length(path_split)]
origin_wd <- getwd()
setwd(path_dir)
if (is.logical(local)) {
if (local) {
user_environment <- .GlobalEnv
} else {
user_environment <- parent.env(current_environment)
}
} else if (is.environment(local)) {
user_environment <- local
} else {
stop("argument \"local\" should be either environment or logical")
}
user_environment
show(user_environment)
stop("ttt")
path <- "loadData.R"
local <- .GlobalEnv
include <- function (path, relative = TRUE, local = FALSE, current_environment = environment())
{
show(local)
stop("ttt")
path <- file.path(path, fsep = "/")
path_split <- strsplit(x = path, split = "/", fixed = TRUE)[[1]]
if (length(path_split) == 1) {
path_dir <- "."
} else {
path_dir <- paste(path_split[-length(path_split)], collapse = "/")
}
path_file <- path_split[length(path_split)]
origin_wd <- getwd()
setwd(path_dir)
if (is.logical(local)) {
if (local) {
user_environment <- .GlobalEnv
} else {
user_environment <- parent.env(current_environment)
}
} else if (is.environment(local)) {
user_environment <- local
} else {
stop("argument \"local\" should be either environment or logical")
}
show(user_environment)
source(path_file, local = user_environment)
setwd(origin_wd)
}
include("loadData.R", local=.GlobalEnv)
include <- function (path, relative = TRUE, local = FALSE, current_environment = environment())
{
path <- file.path(path, fsep = "/")
path_split <- strsplit(x = path, split = "/", fixed = TRUE)[[1]]
if (length(path_split) == 1) {
path_dir <- "."
} else {
path_dir <- paste(path_split[-length(path_split)], collapse = "/")
}
path_file <- path_split[length(path_split)]
origin_wd <- getwd()
setwd(path_dir)
if (is.logical(local)) {
stop("???")
if (local) {
user_environment <- .GlobalEnv
} else {
user_environment <- parent.env(current_environment)
}
} else if (is.environment(local)) {
user_environment <- local
} else {
stop("argument \"local\" should be either environment or logical")
}
show(user_environment)
source(path_file, local = user_environment)
setwd(origin_wd)
}
include("loadData.R", local=.GlobalEnv)
include
path <- "loadData.R"
local <- .GlobalEnv
include <- function (path, relative = TRUE, local = FALSE, current_environment = environment())
{
path <- file.path(path, fsep = "/")
path_split <- strsplit(x = path, split = "/", fixed = TRUE)[[1]]
if (length(path_split) == 1) {
path_dir <- "."
} else {
path_dir <- paste(path_split[-length(path_split)], collapse = "/")
}
path_file <- path_split[length(path_split)]
origin_wd <- getwd()
setwd(path_dir)
stop("???")
if (is.logical(local)) {
if (local) {
user_environment <- .GlobalEnv
} else {
user_environment <- parent.env(current_environment)
}
} else if (is.environment(local)) {
user_environment <- local
} else {
stop("argument \"local\" should be either environment or logical")
}
show(user_environment)
source(path_file, local = user_environment)
setwd(origin_wd)
}
include("loadData.R", local=.GlobalEnv)
path <- "loadData.R"
local <- .GlobalEnv
include <- function (path, relative = TRUE, local = FALSE, current_environment = environment())
{
path <- file.path(path, fsep = "/")
path_split <- strsplit(x = path, split = "/", fixed = TRUE)[[1]]
if (length(path_split) == 1) {
path_dir <- "."
} else {
path_dir <- paste(path_split[-length(path_split)], collapse = "/")
}
path_file <- path_split[length(path_split)]
origin_wd <- getwd()
setwd(path_dir)
if (is.logical(local)) {
if (local) {
user_environment <- .GlobalEnv
} else {
user_environment <- parent.env(current_environment)
}
} else if (is.environment(local)) {
user_environment <- local
} else {
stop("argument \"local\" should be either environment or logical")
}
show(user_environment)
source(path_file, local = user_environment)
setwd(origin_wd)
}
include("loadData.R", local=.GlobalEnv)
path <- "loadData.R"
local <- .GlobalEnv
include <- function (path, relative = TRUE, local = FALSE, current_environment = environment())
{
path <- file.path(path, fsep = "/")
path_split <- strsplit(x = path, split = "/", fixed = TRUE)[[1]]
if (length(path_split) == 1) {
path_dir <- "."
} else {
path_dir <- paste(path_split[-length(path_split)], collapse = "/")
}
path_file <- path_split[length(path_split)]
origin_wd <- getwd()
setwd(path_dir)
show(is.logical(local))
stop("???")
if (is.logical(local)) {
if (local) {
user_environment <- .GlobalEnv
} else {
user_environment <- parent.env(current_environment)
}
} else if (is.environment(local)) {
user_environment <- local
} else {
stop("argument \"local\" should be either environment or logical")
}
show(user_environment)
source(path_file, local = user_environment)
setwd(origin_wd)
}
include("loadData.R", local=.GlobalEnv)
path <- "loadData.R"
local <- .GlobalEnv
include <- function (path, relative = TRUE, local = FALSE, current_environment = environment())
{
path <- file.path(path, fsep = "/")
path_split <- strsplit(x = path, split = "/", fixed = TRUE)[[1]]
if (length(path_split) == 1) {
path_dir <- "."
} else {
path_dir <- paste(path_split[-length(path_split)], collapse = "/")
}
path_file <- path_split[length(path_split)]
origin_wd <- getwd()
setwd(path_dir)
show(is.logical(local))
if (is.logical(local)) {
stop("???")
if (local) {
user_environment <- .GlobalEnv
} else {
user_environment <- parent.env(current_environment)
}
} else if (is.environment(local)) {
user_environment <- local
} else {
stop("argument \"local\" should be either environment or logical")
}
show(user_environment)
source(path_file, local = user_environment)
setwd(origin_wd)
}
include("loadData.R", local=.GlobalEnv)
path <- "loadData.R"
local <- .GlobalEnv
include <- function (path, relative = TRUE, local = FALSE, current_environment = environment())
{
path <- file.path(path, fsep = "/")
path_split <- strsplit(x = path, split = "/", fixed = TRUE)[[1]]
if (length(path_split) == 1) {
path_dir <- "."
} else {
path_dir <- paste(path_split[-length(path_split)], collapse = "/")
}
path_file <- path_split[length(path_split)]
origin_wd <- getwd()
setwd(path_dir)
show(is.logical(local))
if (is.logical(local)) {
if (local) {
user_environment <- .GlobalEnv
} else {
user_environment <- parent.env(current_environment)
}
} else if (is.environment(local)) {
user_environment <- local
} else {
stop("argument \"local\" should be either environment or logical")
}
show(user_environment)
stop("???")
source(path_file, local = user_environment)
setwd(origin_wd)
}
include("loadData.R", local=.GlobalEnv)
path <- "loadData.R"
local <- .GlobalEnv
include <- function (path, relative = TRUE, local = FALSE, current_environment = environment())
{
path <- file.path(path, fsep = "/")
path_split <- strsplit(x = path, split = "/", fixed = TRUE)[[1]]
if (length(path_split) == 1) {
path_dir <- "."
} else {
path_dir <- paste(path_split[-length(path_split)], collapse = "/")
}
path_file <- path_split[length(path_split)]
origin_wd <- getwd()
setwd(path_dir)
show(is.logical(local))
if (is.logical(local)) {
if (local) {
user_environment <- .GlobalEnv
} else {
user_environment <- parent.env(current_environment)
}
} else if (is.environment(local)) {
user_environment <- local
} else {
stop("argument \"local\" should be either environment or logical")
}
show(user_environment)
source(path_file, local = user_environment)
setwd(origin_wd)
}
include("loadData.R", local=.GlobalEnv)
q()
