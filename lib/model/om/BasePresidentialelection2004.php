<?php


/**
 * Base class that represents a row from the 'PresidentialElection2004' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.6.3 on:
 *
 * Wed Jan 11 23:40:54 2012
 *
 * @package    propel.generator.lib.model.om
 */
abstract class BasePresidentialelection2004 extends BaseObject  implements Persistent
{

	/**
	 * Peer class name
	 */
	const PEER = 'Presidentialelection2004Peer';

	/**
	 * The Peer class.
	 * Instance provides a convenient way of calling static methods on a class
	 * that calling code may not be able to identify.
	 * @var        Presidentialelection2004Peer
	 */
	protected static $peer;

	/**
	 * The value for the id field.
	 * @var        int
	 */
	protected $id;

	/**
	 * The value for the county field.
	 * @var        string
	 */
	protected $county;

	/**
	 * The value for the city field.
	 * @var        string
	 */
	protected $city;

	/**
	 * The value for the village field.
	 * @var        string
	 */
	protected $village;

	/**
	 * The value for the voteno field.
	 * @var        int
	 */
	protected $voteno;

	/**
	 * The value for the dppnum field.
	 * @var        int
	 */
	protected $dppnum;

	/**
	 * The value for the dppratio field.
	 * @var        double
	 */
	protected $dppratio;

	/**
	 * The value for the kmtnum field.
	 * @var        int
	 */
	protected $kmtnum;

	/**
	 * The value for the kmtratio field.
	 * @var        double
	 */
	protected $kmtratio;

	/**
	 * The value for the vaildvotes field.
	 * @var        int
	 */
	protected $vaildvotes;

	/**
	 * The value for the invaildvotes field.
	 * @var        int
	 */
	protected $invaildvotes;

	/**
	 * The value for the totalvotes field.
	 * @var        int
	 */
	protected $totalvotes;

	/**
	 * The value for the othervotes field.
	 * @var        int
	 */
	protected $othervotes;

	/**
	 * The value for the votersnum field.
	 * @var        int
	 */
	protected $votersnum;

	/**
	 * The value for the votersratio field.
	 * @var        double
	 */
	protected $votersratio;

	/**
	 * Flag to prevent endless save loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInSave = false;

	/**
	 * Flag to prevent endless validation loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInValidation = false;

	/**
	 * Get the [id] column value.
	 * 
	 * @return     int
	 */
	public function getId()
	{
		return $this->id;
	}

	/**
	 * Get the [county] column value.
	 * 
	 * @return     string
	 */
	public function getCounty()
	{
		return $this->county;
	}

	/**
	 * Get the [city] column value.
	 * 
	 * @return     string
	 */
	public function getCity()
	{
		return $this->city;
	}

	/**
	 * Get the [village] column value.
	 * 
	 * @return     string
	 */
	public function getVillage()
	{
		return $this->village;
	}

	/**
	 * Get the [voteno] column value.
	 * 
	 * @return     int
	 */
	public function getVoteno()
	{
		return $this->voteno;
	}

	/**
	 * Get the [dppnum] column value.
	 * 
	 * @return     int
	 */
	public function getDppnum()
	{
		return $this->dppnum;
	}

	/**
	 * Get the [dppratio] column value.
	 * 
	 * @return     double
	 */
	public function getDppratio()
	{
		return $this->dppratio;
	}

	/**
	 * Get the [kmtnum] column value.
	 * 
	 * @return     int
	 */
	public function getKmtnum()
	{
		return $this->kmtnum;
	}

	/**
	 * Get the [kmtratio] column value.
	 * 
	 * @return     double
	 */
	public function getKmtratio()
	{
		return $this->kmtratio;
	}

	/**
	 * Get the [vaildvotes] column value.
	 * 
	 * @return     int
	 */
	public function getVaildvotes()
	{
		return $this->vaildvotes;
	}

	/**
	 * Get the [invaildvotes] column value.
	 * 
	 * @return     int
	 */
	public function getInvaildvotes()
	{
		return $this->invaildvotes;
	}

	/**
	 * Get the [totalvotes] column value.
	 * 
	 * @return     int
	 */
	public function getTotalvotes()
	{
		return $this->totalvotes;
	}

	/**
	 * Get the [othervotes] column value.
	 * 
	 * @return     int
	 */
	public function getOthervotes()
	{
		return $this->othervotes;
	}

	/**
	 * Get the [votersnum] column value.
	 * 
	 * @return     int
	 */
	public function getVotersnum()
	{
		return $this->votersnum;
	}

	/**
	 * Get the [votersratio] column value.
	 * 
	 * @return     double
	 */
	public function getVotersratio()
	{
		return $this->votersratio;
	}

	/**
	 * Set the value of [id] column.
	 * 
	 * @param      int $v new value
	 * @return     Presidentialelection2004 The current object (for fluent API support)
	 */
	public function setId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->id !== $v) {
			$this->id = $v;
			$this->modifiedColumns[] = Presidentialelection2004Peer::ID;
		}

		return $this;
	} // setId()

	/**
	 * Set the value of [county] column.
	 * 
	 * @param      string $v new value
	 * @return     Presidentialelection2004 The current object (for fluent API support)
	 */
	public function setCounty($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->county !== $v) {
			$this->county = $v;
			$this->modifiedColumns[] = Presidentialelection2004Peer::COUNTY;
		}

		return $this;
	} // setCounty()

	/**
	 * Set the value of [city] column.
	 * 
	 * @param      string $v new value
	 * @return     Presidentialelection2004 The current object (for fluent API support)
	 */
	public function setCity($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->city !== $v) {
			$this->city = $v;
			$this->modifiedColumns[] = Presidentialelection2004Peer::CITY;
		}

		return $this;
	} // setCity()

	/**
	 * Set the value of [village] column.
	 * 
	 * @param      string $v new value
	 * @return     Presidentialelection2004 The current object (for fluent API support)
	 */
	public function setVillage($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->village !== $v) {
			$this->village = $v;
			$this->modifiedColumns[] = Presidentialelection2004Peer::VILLAGE;
		}

		return $this;
	} // setVillage()

	/**
	 * Set the value of [voteno] column.
	 * 
	 * @param      int $v new value
	 * @return     Presidentialelection2004 The current object (for fluent API support)
	 */
	public function setVoteno($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->voteno !== $v) {
			$this->voteno = $v;
			$this->modifiedColumns[] = Presidentialelection2004Peer::VOTENO;
		}

		return $this;
	} // setVoteno()

	/**
	 * Set the value of [dppnum] column.
	 * 
	 * @param      int $v new value
	 * @return     Presidentialelection2004 The current object (for fluent API support)
	 */
	public function setDppnum($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->dppnum !== $v) {
			$this->dppnum = $v;
			$this->modifiedColumns[] = Presidentialelection2004Peer::DPPNUM;
		}

		return $this;
	} // setDppnum()

	/**
	 * Set the value of [dppratio] column.
	 * 
	 * @param      double $v new value
	 * @return     Presidentialelection2004 The current object (for fluent API support)
	 */
	public function setDppratio($v)
	{
		if ($v !== null) {
			$v = (double) $v;
		}

		if ($this->dppratio !== $v) {
			$this->dppratio = $v;
			$this->modifiedColumns[] = Presidentialelection2004Peer::DPPRATIO;
		}

		return $this;
	} // setDppratio()

	/**
	 * Set the value of [kmtnum] column.
	 * 
	 * @param      int $v new value
	 * @return     Presidentialelection2004 The current object (for fluent API support)
	 */
	public function setKmtnum($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->kmtnum !== $v) {
			$this->kmtnum = $v;
			$this->modifiedColumns[] = Presidentialelection2004Peer::KMTNUM;
		}

		return $this;
	} // setKmtnum()

	/**
	 * Set the value of [kmtratio] column.
	 * 
	 * @param      double $v new value
	 * @return     Presidentialelection2004 The current object (for fluent API support)
	 */
	public function setKmtratio($v)
	{
		if ($v !== null) {
			$v = (double) $v;
		}

		if ($this->kmtratio !== $v) {
			$this->kmtratio = $v;
			$this->modifiedColumns[] = Presidentialelection2004Peer::KMTRATIO;
		}

		return $this;
	} // setKmtratio()

	/**
	 * Set the value of [vaildvotes] column.
	 * 
	 * @param      int $v new value
	 * @return     Presidentialelection2004 The current object (for fluent API support)
	 */
	public function setVaildvotes($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->vaildvotes !== $v) {
			$this->vaildvotes = $v;
			$this->modifiedColumns[] = Presidentialelection2004Peer::VAILDVOTES;
		}

		return $this;
	} // setVaildvotes()

	/**
	 * Set the value of [invaildvotes] column.
	 * 
	 * @param      int $v new value
	 * @return     Presidentialelection2004 The current object (for fluent API support)
	 */
	public function setInvaildvotes($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->invaildvotes !== $v) {
			$this->invaildvotes = $v;
			$this->modifiedColumns[] = Presidentialelection2004Peer::INVAILDVOTES;
		}

		return $this;
	} // setInvaildvotes()

	/**
	 * Set the value of [totalvotes] column.
	 * 
	 * @param      int $v new value
	 * @return     Presidentialelection2004 The current object (for fluent API support)
	 */
	public function setTotalvotes($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->totalvotes !== $v) {
			$this->totalvotes = $v;
			$this->modifiedColumns[] = Presidentialelection2004Peer::TOTALVOTES;
		}

		return $this;
	} // setTotalvotes()

	/**
	 * Set the value of [othervotes] column.
	 * 
	 * @param      int $v new value
	 * @return     Presidentialelection2004 The current object (for fluent API support)
	 */
	public function setOthervotes($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->othervotes !== $v) {
			$this->othervotes = $v;
			$this->modifiedColumns[] = Presidentialelection2004Peer::OTHERVOTES;
		}

		return $this;
	} // setOthervotes()

	/**
	 * Set the value of [votersnum] column.
	 * 
	 * @param      int $v new value
	 * @return     Presidentialelection2004 The current object (for fluent API support)
	 */
	public function setVotersnum($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->votersnum !== $v) {
			$this->votersnum = $v;
			$this->modifiedColumns[] = Presidentialelection2004Peer::VOTERSNUM;
		}

		return $this;
	} // setVotersnum()

	/**
	 * Set the value of [votersratio] column.
	 * 
	 * @param      double $v new value
	 * @return     Presidentialelection2004 The current object (for fluent API support)
	 */
	public function setVotersratio($v)
	{
		if ($v !== null) {
			$v = (double) $v;
		}

		if ($this->votersratio !== $v) {
			$this->votersratio = $v;
			$this->modifiedColumns[] = Presidentialelection2004Peer::VOTERSRATIO;
		}

		return $this;
	} // setVotersratio()

	/**
	 * Indicates whether the columns in this object are only set to default values.
	 *
	 * This method can be used in conjunction with isModified() to indicate whether an object is both
	 * modified _and_ has some values set which are non-default.
	 *
	 * @return     boolean Whether the columns in this object are only been set with default values.
	 */
	public function hasOnlyDefaultValues()
	{
		// otherwise, everything was equal, so return TRUE
		return true;
	} // hasOnlyDefaultValues()

	/**
	 * Hydrates (populates) the object variables with values from the database resultset.
	 *
	 * An offset (0-based "start column") is specified so that objects can be hydrated
	 * with a subset of the columns in the resultset rows.  This is needed, for example,
	 * for results of JOIN queries where the resultset row includes columns from two or
	 * more tables.
	 *
	 * @param      array $row The row returned by PDOStatement->fetch(PDO::FETCH_NUM)
	 * @param      int $startcol 0-based offset column which indicates which restultset column to start with.
	 * @param      boolean $rehydrate Whether this object is being re-hydrated from the database.
	 * @return     int next starting column
	 * @throws     PropelException  - Any caught Exception will be rewrapped as a PropelException.
	 */
	public function hydrate($row, $startcol = 0, $rehydrate = false)
	{
		try {

			$this->id = ($row[$startcol + 0] !== null) ? (int) $row[$startcol + 0] : null;
			$this->county = ($row[$startcol + 1] !== null) ? (string) $row[$startcol + 1] : null;
			$this->city = ($row[$startcol + 2] !== null) ? (string) $row[$startcol + 2] : null;
			$this->village = ($row[$startcol + 3] !== null) ? (string) $row[$startcol + 3] : null;
			$this->voteno = ($row[$startcol + 4] !== null) ? (int) $row[$startcol + 4] : null;
			$this->dppnum = ($row[$startcol + 5] !== null) ? (int) $row[$startcol + 5] : null;
			$this->dppratio = ($row[$startcol + 6] !== null) ? (double) $row[$startcol + 6] : null;
			$this->kmtnum = ($row[$startcol + 7] !== null) ? (int) $row[$startcol + 7] : null;
			$this->kmtratio = ($row[$startcol + 8] !== null) ? (double) $row[$startcol + 8] : null;
			$this->vaildvotes = ($row[$startcol + 9] !== null) ? (int) $row[$startcol + 9] : null;
			$this->invaildvotes = ($row[$startcol + 10] !== null) ? (int) $row[$startcol + 10] : null;
			$this->totalvotes = ($row[$startcol + 11] !== null) ? (int) $row[$startcol + 11] : null;
			$this->othervotes = ($row[$startcol + 12] !== null) ? (int) $row[$startcol + 12] : null;
			$this->votersnum = ($row[$startcol + 13] !== null) ? (int) $row[$startcol + 13] : null;
			$this->votersratio = ($row[$startcol + 14] !== null) ? (double) $row[$startcol + 14] : null;
			$this->resetModified();

			$this->setNew(false);

			if ($rehydrate) {
				$this->ensureConsistency();
			}

			return $startcol + 15; // 15 = Presidentialelection2004Peer::NUM_HYDRATE_COLUMNS.

		} catch (Exception $e) {
			throw new PropelException("Error populating Presidentialelection2004 object", $e);
		}
	}

	/**
	 * Checks and repairs the internal consistency of the object.
	 *
	 * This method is executed after an already-instantiated object is re-hydrated
	 * from the database.  It exists to check any foreign keys to make sure that
	 * the objects related to the current object are correct based on foreign key.
	 *
	 * You can override this method in the stub class, but you should always invoke
	 * the base method from the overridden method (i.e. parent::ensureConsistency()),
	 * in case your model changes.
	 *
	 * @throws     PropelException
	 */
	public function ensureConsistency()
	{

	} // ensureConsistency

	/**
	 * Reloads this object from datastore based on primary key and (optionally) resets all associated objects.
	 *
	 * This will only work if the object has been saved and has a valid primary key set.
	 *
	 * @param      boolean $deep (optional) Whether to also de-associated any related objects.
	 * @param      PropelPDO $con (optional) The PropelPDO connection to use.
	 * @return     void
	 * @throws     PropelException - if this object is deleted, unsaved or doesn't have pk match in db
	 */
	public function reload($deep = false, PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("Cannot reload a deleted object.");
		}

		if ($this->isNew()) {
			throw new PropelException("Cannot reload an unsaved object.");
		}

		if ($con === null) {
			$con = Propel::getConnection(Presidentialelection2004Peer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		// We don't need to alter the object instance pool; we're just modifying this instance
		// already in the pool.

		$stmt = Presidentialelection2004Peer::doSelectStmt($this->buildPkeyCriteria(), $con);
		$row = $stmt->fetch(PDO::FETCH_NUM);
		$stmt->closeCursor();
		if (!$row) {
			throw new PropelException('Cannot find matching row in the database to reload object values.');
		}
		$this->hydrate($row, 0, true); // rehydrate

		if ($deep) {  // also de-associate any related objects?

		} // if (deep)
	}

	/**
	 * Removes this object from datastore and sets delete attribute.
	 *
	 * @param      PropelPDO $con
	 * @return     void
	 * @throws     PropelException
	 * @see        BaseObject::setDeleted()
	 * @see        BaseObject::isDeleted()
	 */
	public function delete(PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("This object has already been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(Presidentialelection2004Peer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}

		$con->beginTransaction();
		try {
			$deleteQuery = Presidentialelection2004Query::create()
				->filterByPrimaryKey($this->getPrimaryKey());
			$ret = $this->preDelete($con);
			// symfony_behaviors behavior
			foreach (sfMixer::getCallables('BasePresidentialelection2004:delete:pre') as $callable)
			{
			  if (call_user_func($callable, $this, $con))
			  {
			    $con->commit();
			    return;
			  }
			}

			if ($ret) {
				$deleteQuery->delete($con);
				$this->postDelete($con);
				// symfony_behaviors behavior
				foreach (sfMixer::getCallables('BasePresidentialelection2004:delete:post') as $callable)
				{
				  call_user_func($callable, $this, $con);
				}

				$con->commit();
				$this->setDeleted(true);
			} else {
				$con->commit();
			}
		} catch (Exception $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Persists this object to the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All modified related objects will also be persisted in the doSave()
	 * method.  This method wraps all precipitate database operations in a
	 * single transaction.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        doSave()
	 */
	public function save(PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("You cannot save an object that has been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(Presidentialelection2004Peer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}

		$con->beginTransaction();
		$isInsert = $this->isNew();
		try {
			$ret = $this->preSave($con);
			// symfony_behaviors behavior
			foreach (sfMixer::getCallables('BasePresidentialelection2004:save:pre') as $callable)
			{
			  if (is_integer($affectedRows = call_user_func($callable, $this, $con)))
			  {
			  	$con->commit();
			    return $affectedRows;
			  }
			}

			if ($isInsert) {
				$ret = $ret && $this->preInsert($con);
			} else {
				$ret = $ret && $this->preUpdate($con);
			}
			if ($ret) {
				$affectedRows = $this->doSave($con);
				if ($isInsert) {
					$this->postInsert($con);
				} else {
					$this->postUpdate($con);
				}
				$this->postSave($con);
				// symfony_behaviors behavior
				foreach (sfMixer::getCallables('BasePresidentialelection2004:save:post') as $callable)
				{
				  call_user_func($callable, $this, $con, $affectedRows);
				}

				Presidentialelection2004Peer::addInstanceToPool($this);
			} else {
				$affectedRows = 0;
			}
			$con->commit();
			return $affectedRows;
		} catch (Exception $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Performs the work of inserting or updating the row in the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All related objects are also updated in this method.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        save()
	 */
	protected function doSave(PropelPDO $con)
	{
		$affectedRows = 0; // initialize var to track total num of affected rows
		if (!$this->alreadyInSave) {
			$this->alreadyInSave = true;

			if ($this->isNew() || $this->isModified()) {
				// persist changes
				if ($this->isNew()) {
					$this->doInsert($con);
				} else {
					$this->doUpdate($con);
				}
				$affectedRows += 1;
				$this->resetModified();
			}

			$this->alreadyInSave = false;

		}
		return $affectedRows;
	} // doSave()

	/**
	 * Insert the row in the database.
	 *
	 * @param      PropelPDO $con
	 *
	 * @throws     PropelException
	 * @see        doSave()
	 */
	protected function doInsert(PropelPDO $con)
	{
		$modifiedColumns = array();
		$index = 0;

		$this->modifiedColumns[] = Presidentialelection2004Peer::ID;
		if (null !== $this->id) {
			throw new PropelException('Cannot insert a value for auto-increment primary key (' . Presidentialelection2004Peer::ID . ')');
		}
		if (null === $this->id) {
			try {				
				$stmt = $con->query("SELECT nextval('PresidentialElection2004_id_seq')");
				$row = $stmt->fetch(PDO::FETCH_NUM);
				$this->id = $row[0];
			} catch (Exception $e) {
				throw new PropelException('Unable to get sequence id.', $e);
			}
		}


		 // check the columns in natural order for more readable SQL queries
		if ($this->isColumnModified(Presidentialelection2004Peer::ID)) {
			$modifiedColumns[':p' . $index++]  = 'ID';
		}
		if ($this->isColumnModified(Presidentialelection2004Peer::COUNTY)) {
			$modifiedColumns[':p' . $index++]  = 'COUNTY';
		}
		if ($this->isColumnModified(Presidentialelection2004Peer::CITY)) {
			$modifiedColumns[':p' . $index++]  = 'CITY';
		}
		if ($this->isColumnModified(Presidentialelection2004Peer::VILLAGE)) {
			$modifiedColumns[':p' . $index++]  = 'VILLAGE';
		}
		if ($this->isColumnModified(Presidentialelection2004Peer::VOTENO)) {
			$modifiedColumns[':p' . $index++]  = 'VOTENO';
		}
		if ($this->isColumnModified(Presidentialelection2004Peer::DPPNUM)) {
			$modifiedColumns[':p' . $index++]  = 'DPPNUM';
		}
		if ($this->isColumnModified(Presidentialelection2004Peer::DPPRATIO)) {
			$modifiedColumns[':p' . $index++]  = 'DPPRATIO';
		}
		if ($this->isColumnModified(Presidentialelection2004Peer::KMTNUM)) {
			$modifiedColumns[':p' . $index++]  = 'KMTNUM';
		}
		if ($this->isColumnModified(Presidentialelection2004Peer::KMTRATIO)) {
			$modifiedColumns[':p' . $index++]  = 'KMTRATIO';
		}
		if ($this->isColumnModified(Presidentialelection2004Peer::VAILDVOTES)) {
			$modifiedColumns[':p' . $index++]  = 'VAILDVOTES';
		}
		if ($this->isColumnModified(Presidentialelection2004Peer::INVAILDVOTES)) {
			$modifiedColumns[':p' . $index++]  = 'INVAILDVOTES';
		}
		if ($this->isColumnModified(Presidentialelection2004Peer::TOTALVOTES)) {
			$modifiedColumns[':p' . $index++]  = 'TOTALVOTES';
		}
		if ($this->isColumnModified(Presidentialelection2004Peer::OTHERVOTES)) {
			$modifiedColumns[':p' . $index++]  = 'OTHERVOTES';
		}
		if ($this->isColumnModified(Presidentialelection2004Peer::VOTERSNUM)) {
			$modifiedColumns[':p' . $index++]  = 'VOTERSNUM';
		}
		if ($this->isColumnModified(Presidentialelection2004Peer::VOTERSRATIO)) {
			$modifiedColumns[':p' . $index++]  = 'VOTERSRATIO';
		}

		$sql = sprintf(
			'INSERT INTO PresidentialElection2004 (%s) VALUES (%s)',
			implode(', ', $modifiedColumns),
			implode(', ', array_keys($modifiedColumns))
		);

		try {
			$stmt = $con->prepare($sql);
			foreach ($modifiedColumns as $identifier => $columnName) {
				switch ($columnName) {
					case 'ID':
						$stmt->bindValue($identifier, $this->id, PDO::PARAM_INT);
						break;
					case 'COUNTY':
						$stmt->bindValue($identifier, $this->county, PDO::PARAM_STR);
						break;
					case 'CITY':
						$stmt->bindValue($identifier, $this->city, PDO::PARAM_STR);
						break;
					case 'VILLAGE':
						$stmt->bindValue($identifier, $this->village, PDO::PARAM_STR);
						break;
					case 'VOTENO':
						$stmt->bindValue($identifier, $this->voteno, PDO::PARAM_INT);
						break;
					case 'DPPNUM':
						$stmt->bindValue($identifier, $this->dppnum, PDO::PARAM_INT);
						break;
					case 'DPPRATIO':
						$stmt->bindValue($identifier, $this->dppratio, PDO::PARAM_STR);
						break;
					case 'KMTNUM':
						$stmt->bindValue($identifier, $this->kmtnum, PDO::PARAM_INT);
						break;
					case 'KMTRATIO':
						$stmt->bindValue($identifier, $this->kmtratio, PDO::PARAM_STR);
						break;
					case 'VAILDVOTES':
						$stmt->bindValue($identifier, $this->vaildvotes, PDO::PARAM_INT);
						break;
					case 'INVAILDVOTES':
						$stmt->bindValue($identifier, $this->invaildvotes, PDO::PARAM_INT);
						break;
					case 'TOTALVOTES':
						$stmt->bindValue($identifier, $this->totalvotes, PDO::PARAM_INT);
						break;
					case 'OTHERVOTES':
						$stmt->bindValue($identifier, $this->othervotes, PDO::PARAM_INT);
						break;
					case 'VOTERSNUM':
						$stmt->bindValue($identifier, $this->votersnum, PDO::PARAM_INT);
						break;
					case 'VOTERSRATIO':
						$stmt->bindValue($identifier, $this->votersratio, PDO::PARAM_STR);
						break;
				}
			}
			$stmt->execute();
		} catch (Exception $e) {
			Propel::log($e->getMessage(), Propel::LOG_ERR);
			throw new PropelException(sprintf('Unable to execute INSERT statement [%s]', $sql), $e);
		}

		$this->setNew(false);
	}

	/**
	 * Update the row in the database.
	 *
	 * @param      PropelPDO $con
	 *
	 * @see        doSave()
	 */
	protected function doUpdate(PropelPDO $con)
	{
		$selectCriteria = $this->buildPkeyCriteria();
		$valuesCriteria = $this->buildCriteria();
		BasePeer::doUpdate($selectCriteria, $valuesCriteria, $con);
	}

	/**
	 * Array of ValidationFailed objects.
	 * @var        array ValidationFailed[]
	 */
	protected $validationFailures = array();

	/**
	 * Gets any ValidationFailed objects that resulted from last call to validate().
	 *
	 *
	 * @return     array ValidationFailed[]
	 * @see        validate()
	 */
	public function getValidationFailures()
	{
		return $this->validationFailures;
	}

	/**
	 * Validates the objects modified field values and all objects related to this table.
	 *
	 * If $columns is either a column name or an array of column names
	 * only those columns are validated.
	 *
	 * @param      mixed $columns Column name or an array of column names.
	 * @return     boolean Whether all columns pass validation.
	 * @see        doValidate()
	 * @see        getValidationFailures()
	 */
	public function validate($columns = null)
	{
		$res = $this->doValidate($columns);
		if ($res === true) {
			$this->validationFailures = array();
			return true;
		} else {
			$this->validationFailures = $res;
			return false;
		}
	}

	/**
	 * This function performs the validation work for complex object models.
	 *
	 * In addition to checking the current object, all related objects will
	 * also be validated.  If all pass then <code>true</code> is returned; otherwise
	 * an aggreagated array of ValidationFailed objects will be returned.
	 *
	 * @param      array $columns Array of column names to validate.
	 * @return     mixed <code>true</code> if all validations pass; array of <code>ValidationFailed</code> objets otherwise.
	 */
	protected function doValidate($columns = null)
	{
		if (!$this->alreadyInValidation) {
			$this->alreadyInValidation = true;
			$retval = null;

			$failureMap = array();


			if (($retval = Presidentialelection2004Peer::doValidate($this, $columns)) !== true) {
				$failureMap = array_merge($failureMap, $retval);
			}



			$this->alreadyInValidation = false;
		}

		return (!empty($failureMap) ? $failureMap : true);
	}

	/**
	 * Retrieves a field from the object by name passed in as a string.
	 *
	 * @param      string $name name
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     mixed Value of field.
	 */
	public function getByName($name, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = Presidentialelection2004Peer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		$field = $this->getByPosition($pos);
		return $field;
	}

	/**
	 * Retrieves a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @return     mixed Value of field at $pos
	 */
	public function getByPosition($pos)
	{
		switch($pos) {
			case 0:
				return $this->getId();
				break;
			case 1:
				return $this->getCounty();
				break;
			case 2:
				return $this->getCity();
				break;
			case 3:
				return $this->getVillage();
				break;
			case 4:
				return $this->getVoteno();
				break;
			case 5:
				return $this->getDppnum();
				break;
			case 6:
				return $this->getDppratio();
				break;
			case 7:
				return $this->getKmtnum();
				break;
			case 8:
				return $this->getKmtratio();
				break;
			case 9:
				return $this->getVaildvotes();
				break;
			case 10:
				return $this->getInvaildvotes();
				break;
			case 11:
				return $this->getTotalvotes();
				break;
			case 12:
				return $this->getOthervotes();
				break;
			case 13:
				return $this->getVotersnum();
				break;
			case 14:
				return $this->getVotersratio();
				break;
			default:
				return null;
				break;
		} // switch()
	}

	/**
	 * Exports the object as an array.
	 *
	 * You can specify the key type of the array by passing one of the class
	 * type constants.
	 *
	 * @param     string  $keyType (optional) One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME,
	 *                    BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
	 *                    Defaults to BasePeer::TYPE_PHPNAME.
	 * @param     boolean $includeLazyLoadColumns (optional) Whether to include lazy loaded columns. Defaults to TRUE.
	 * @param     array $alreadyDumpedObjects List of objects to skip to avoid recursion
	 *
	 * @return    array an associative array containing the field names (as keys) and field values
	 */
	public function toArray($keyType = BasePeer::TYPE_PHPNAME, $includeLazyLoadColumns = true, $alreadyDumpedObjects = array())
	{
		if (isset($alreadyDumpedObjects['Presidentialelection2004'][$this->getPrimaryKey()])) {
			return '*RECURSION*';
		}
		$alreadyDumpedObjects['Presidentialelection2004'][$this->getPrimaryKey()] = true;
		$keys = Presidentialelection2004Peer::getFieldNames($keyType);
		$result = array(
			$keys[0] => $this->getId(),
			$keys[1] => $this->getCounty(),
			$keys[2] => $this->getCity(),
			$keys[3] => $this->getVillage(),
			$keys[4] => $this->getVoteno(),
			$keys[5] => $this->getDppnum(),
			$keys[6] => $this->getDppratio(),
			$keys[7] => $this->getKmtnum(),
			$keys[8] => $this->getKmtratio(),
			$keys[9] => $this->getVaildvotes(),
			$keys[10] => $this->getInvaildvotes(),
			$keys[11] => $this->getTotalvotes(),
			$keys[12] => $this->getOthervotes(),
			$keys[13] => $this->getVotersnum(),
			$keys[14] => $this->getVotersratio(),
		);
		return $result;
	}

	/**
	 * Sets a field from the object by name passed in as a string.
	 *
	 * @param      string $name peer name
	 * @param      mixed $value field value
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     void
	 */
	public function setByName($name, $value, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = Presidentialelection2004Peer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		return $this->setByPosition($pos, $value);
	}

	/**
	 * Sets a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @param      mixed $value field value
	 * @return     void
	 */
	public function setByPosition($pos, $value)
	{
		switch($pos) {
			case 0:
				$this->setId($value);
				break;
			case 1:
				$this->setCounty($value);
				break;
			case 2:
				$this->setCity($value);
				break;
			case 3:
				$this->setVillage($value);
				break;
			case 4:
				$this->setVoteno($value);
				break;
			case 5:
				$this->setDppnum($value);
				break;
			case 6:
				$this->setDppratio($value);
				break;
			case 7:
				$this->setKmtnum($value);
				break;
			case 8:
				$this->setKmtratio($value);
				break;
			case 9:
				$this->setVaildvotes($value);
				break;
			case 10:
				$this->setInvaildvotes($value);
				break;
			case 11:
				$this->setTotalvotes($value);
				break;
			case 12:
				$this->setOthervotes($value);
				break;
			case 13:
				$this->setVotersnum($value);
				break;
			case 14:
				$this->setVotersratio($value);
				break;
		} // switch()
	}

	/**
	 * Populates the object using an array.
	 *
	 * This is particularly useful when populating an object from one of the
	 * request arrays (e.g. $_POST).  This method goes through the column
	 * names, checking to see whether a matching key exists in populated
	 * array. If so the setByName() method is called for that column.
	 *
	 * You can specify the key type of the array by additionally passing one
	 * of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME,
	 * BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
	 * The default key type is the column's phpname (e.g. 'AuthorId')
	 *
	 * @param      array  $arr     An array to populate the object from.
	 * @param      string $keyType The type of keys the array uses.
	 * @return     void
	 */
	public function fromArray($arr, $keyType = BasePeer::TYPE_PHPNAME)
	{
		$keys = Presidentialelection2004Peer::getFieldNames($keyType);

		if (array_key_exists($keys[0], $arr)) $this->setId($arr[$keys[0]]);
		if (array_key_exists($keys[1], $arr)) $this->setCounty($arr[$keys[1]]);
		if (array_key_exists($keys[2], $arr)) $this->setCity($arr[$keys[2]]);
		if (array_key_exists($keys[3], $arr)) $this->setVillage($arr[$keys[3]]);
		if (array_key_exists($keys[4], $arr)) $this->setVoteno($arr[$keys[4]]);
		if (array_key_exists($keys[5], $arr)) $this->setDppnum($arr[$keys[5]]);
		if (array_key_exists($keys[6], $arr)) $this->setDppratio($arr[$keys[6]]);
		if (array_key_exists($keys[7], $arr)) $this->setKmtnum($arr[$keys[7]]);
		if (array_key_exists($keys[8], $arr)) $this->setKmtratio($arr[$keys[8]]);
		if (array_key_exists($keys[9], $arr)) $this->setVaildvotes($arr[$keys[9]]);
		if (array_key_exists($keys[10], $arr)) $this->setInvaildvotes($arr[$keys[10]]);
		if (array_key_exists($keys[11], $arr)) $this->setTotalvotes($arr[$keys[11]]);
		if (array_key_exists($keys[12], $arr)) $this->setOthervotes($arr[$keys[12]]);
		if (array_key_exists($keys[13], $arr)) $this->setVotersnum($arr[$keys[13]]);
		if (array_key_exists($keys[14], $arr)) $this->setVotersratio($arr[$keys[14]]);
	}

	/**
	 * Build a Criteria object containing the values of all modified columns in this object.
	 *
	 * @return     Criteria The Criteria object containing all modified values.
	 */
	public function buildCriteria()
	{
		$criteria = new Criteria(Presidentialelection2004Peer::DATABASE_NAME);

		if ($this->isColumnModified(Presidentialelection2004Peer::ID)) $criteria->add(Presidentialelection2004Peer::ID, $this->id);
		if ($this->isColumnModified(Presidentialelection2004Peer::COUNTY)) $criteria->add(Presidentialelection2004Peer::COUNTY, $this->county);
		if ($this->isColumnModified(Presidentialelection2004Peer::CITY)) $criteria->add(Presidentialelection2004Peer::CITY, $this->city);
		if ($this->isColumnModified(Presidentialelection2004Peer::VILLAGE)) $criteria->add(Presidentialelection2004Peer::VILLAGE, $this->village);
		if ($this->isColumnModified(Presidentialelection2004Peer::VOTENO)) $criteria->add(Presidentialelection2004Peer::VOTENO, $this->voteno);
		if ($this->isColumnModified(Presidentialelection2004Peer::DPPNUM)) $criteria->add(Presidentialelection2004Peer::DPPNUM, $this->dppnum);
		if ($this->isColumnModified(Presidentialelection2004Peer::DPPRATIO)) $criteria->add(Presidentialelection2004Peer::DPPRATIO, $this->dppratio);
		if ($this->isColumnModified(Presidentialelection2004Peer::KMTNUM)) $criteria->add(Presidentialelection2004Peer::KMTNUM, $this->kmtnum);
		if ($this->isColumnModified(Presidentialelection2004Peer::KMTRATIO)) $criteria->add(Presidentialelection2004Peer::KMTRATIO, $this->kmtratio);
		if ($this->isColumnModified(Presidentialelection2004Peer::VAILDVOTES)) $criteria->add(Presidentialelection2004Peer::VAILDVOTES, $this->vaildvotes);
		if ($this->isColumnModified(Presidentialelection2004Peer::INVAILDVOTES)) $criteria->add(Presidentialelection2004Peer::INVAILDVOTES, $this->invaildvotes);
		if ($this->isColumnModified(Presidentialelection2004Peer::TOTALVOTES)) $criteria->add(Presidentialelection2004Peer::TOTALVOTES, $this->totalvotes);
		if ($this->isColumnModified(Presidentialelection2004Peer::OTHERVOTES)) $criteria->add(Presidentialelection2004Peer::OTHERVOTES, $this->othervotes);
		if ($this->isColumnModified(Presidentialelection2004Peer::VOTERSNUM)) $criteria->add(Presidentialelection2004Peer::VOTERSNUM, $this->votersnum);
		if ($this->isColumnModified(Presidentialelection2004Peer::VOTERSRATIO)) $criteria->add(Presidentialelection2004Peer::VOTERSRATIO, $this->votersratio);

		return $criteria;
	}

	/**
	 * Builds a Criteria object containing the primary key for this object.
	 *
	 * Unlike buildCriteria() this method includes the primary key values regardless
	 * of whether or not they have been modified.
	 *
	 * @return     Criteria The Criteria object containing value(s) for primary key(s).
	 */
	public function buildPkeyCriteria()
	{
		$criteria = new Criteria(Presidentialelection2004Peer::DATABASE_NAME);
		$criteria->add(Presidentialelection2004Peer::ID, $this->id);

		return $criteria;
	}

	/**
	 * Returns the primary key for this object (row).
	 * @return     int
	 */
	public function getPrimaryKey()
	{
		return $this->getId();
	}

	/**
	 * Generic method to set the primary key (id column).
	 *
	 * @param      int $key Primary key.
	 * @return     void
	 */
	public function setPrimaryKey($key)
	{
		$this->setId($key);
	}

	/**
	 * Returns true if the primary key for this object is null.
	 * @return     boolean
	 */
	public function isPrimaryKeyNull()
	{
		return null === $this->getId();
	}

	/**
	 * Sets contents of passed object to values from current object.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      object $copyObj An object of Presidentialelection2004 (or compatible) type.
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @param      boolean $makeNew Whether to reset autoincrement PKs and make the object new.
	 * @throws     PropelException
	 */
	public function copyInto($copyObj, $deepCopy = false, $makeNew = true)
	{
		$copyObj->setCounty($this->getCounty());
		$copyObj->setCity($this->getCity());
		$copyObj->setVillage($this->getVillage());
		$copyObj->setVoteno($this->getVoteno());
		$copyObj->setDppnum($this->getDppnum());
		$copyObj->setDppratio($this->getDppratio());
		$copyObj->setKmtnum($this->getKmtnum());
		$copyObj->setKmtratio($this->getKmtratio());
		$copyObj->setVaildvotes($this->getVaildvotes());
		$copyObj->setInvaildvotes($this->getInvaildvotes());
		$copyObj->setTotalvotes($this->getTotalvotes());
		$copyObj->setOthervotes($this->getOthervotes());
		$copyObj->setVotersnum($this->getVotersnum());
		$copyObj->setVotersratio($this->getVotersratio());
		if ($makeNew) {
			$copyObj->setNew(true);
			$copyObj->setId(NULL); // this is a auto-increment column, so set to default value
		}
	}

	/**
	 * Makes a copy of this object that will be inserted as a new row in table when saved.
	 * It creates a new object filling in the simple attributes, but skipping any primary
	 * keys that are defined for the table.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @return     Presidentialelection2004 Clone of current object.
	 * @throws     PropelException
	 */
	public function copy($deepCopy = false)
	{
		// we use get_class(), because this might be a subclass
		$clazz = get_class($this);
		$copyObj = new $clazz();
		$this->copyInto($copyObj, $deepCopy);
		return $copyObj;
	}

	/**
	 * Returns a peer instance associated with this om.
	 *
	 * Since Peer classes are not to have any instance attributes, this method returns the
	 * same instance for all member of this class. The method could therefore
	 * be static, but this would prevent one from overriding the behavior.
	 *
	 * @return     Presidentialelection2004Peer
	 */
	public function getPeer()
	{
		if (self::$peer === null) {
			self::$peer = new Presidentialelection2004Peer();
		}
		return self::$peer;
	}

	/**
	 * Clears the current object and sets all attributes to their default values
	 */
	public function clear()
	{
		$this->id = null;
		$this->county = null;
		$this->city = null;
		$this->village = null;
		$this->voteno = null;
		$this->dppnum = null;
		$this->dppratio = null;
		$this->kmtnum = null;
		$this->kmtratio = null;
		$this->vaildvotes = null;
		$this->invaildvotes = null;
		$this->totalvotes = null;
		$this->othervotes = null;
		$this->votersnum = null;
		$this->votersratio = null;
		$this->alreadyInSave = false;
		$this->alreadyInValidation = false;
		$this->clearAllReferences();
		$this->resetModified();
		$this->setNew(true);
		$this->setDeleted(false);
	}

	/**
	 * Resets all references to other model objects or collections of model objects.
	 *
	 * This method is a user-space workaround for PHP's inability to garbage collect
	 * objects with circular references (even in PHP 5.3). This is currently necessary
	 * when using Propel in certain daemon or large-volumne/high-memory operations.
	 *
	 * @param      boolean $deep Whether to also clear the references on all referrer objects.
	 */
	public function clearAllReferences($deep = false)
	{
		if ($deep) {
		} // if ($deep)

	}

	/**
	 * Return the string representation of this object
	 *
	 * @return string
	 */
	public function __toString()
	{
		return (string) $this->exportTo(Presidentialelection2004Peer::DEFAULT_STRING_FORMAT);
	}

	/**
	 * Catches calls to virtual methods
	 */
	public function __call($name, $params)
	{
		
		// symfony_behaviors behavior
		if ($callable = sfMixer::getCallable('BasePresidentialelection2004:' . $name))
		{
		  array_unshift($params, $this);
		  return call_user_func_array($callable, $params);
		}

		return parent::__call($name, $params);
	}

} // BasePresidentialelection2004
