<?php


/**
 * Base class that represents a query for the 'routes_2011' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.6.3 on:
 *
 * Wed Jan 11 23:40:55 2012
 *
 * @method     Routes2011Query orderById($order = Criteria::ASC) Order by the id column
 * @method     Routes2011Query orderByRouteid($order = Criteria::ASC) Order by the routeid column
 * @method     Routes2011Query orderByProviderid($order = Criteria::ASC) Order by the providerid column
 * @method     Routes2011Query orderByProvidername($order = Criteria::ASC) Order by the providername column
 * @method     Routes2011Query orderByNamezh($order = Criteria::ASC) Order by the namezh column
 * @method     Routes2011Query orderByNameen($order = Criteria::ASC) Order by the nameen column
 * @method     Routes2011Query orderByPathattributeid($order = Criteria::ASC) Order by the pathattributeid column
 * @method     Routes2011Query orderByPathattributename($order = Criteria::ASC) Order by the pathattributename column
 * @method     Routes2011Query orderByPathattributeename($order = Criteria::ASC) Order by the pathattributeename column
 * @method     Routes2011Query orderByBuildperiod($order = Criteria::ASC) Order by the buildperiod column
 * @method     Routes2011Query orderByDeparturezh($order = Criteria::ASC) Order by the departurezh column
 * @method     Routes2011Query orderByDepartureen($order = Criteria::ASC) Order by the departureen column
 * @method     Routes2011Query orderByDestinationzh($order = Criteria::ASC) Order by the destinationzh column
 * @method     Routes2011Query orderByDestinationen($order = Criteria::ASC) Order by the destinationen column
 * @method     Routes2011Query orderByRealsequence($order = Criteria::ASC) Order by the realsequence column
 * @method     Routes2011Query orderByDistance($order = Criteria::ASC) Order by the distance column
 * @method     Routes2011Query orderByGofirstbustime($order = Criteria::ASC) Order by the gofirstbustime column
 * @method     Routes2011Query orderByBackfirstbustime($order = Criteria::ASC) Order by the backfirstbustime column
 * @method     Routes2011Query orderByGolastbustime($order = Criteria::ASC) Order by the golastbustime column
 * @method     Routes2011Query orderByBacklastbustime($order = Criteria::ASC) Order by the backlastbustime column
 * @method     Routes2011Query orderByOffpeakheadway($order = Criteria::ASC) Order by the offpeakheadway column
 *
 * @method     Routes2011Query groupById() Group by the id column
 * @method     Routes2011Query groupByRouteid() Group by the routeid column
 * @method     Routes2011Query groupByProviderid() Group by the providerid column
 * @method     Routes2011Query groupByProvidername() Group by the providername column
 * @method     Routes2011Query groupByNamezh() Group by the namezh column
 * @method     Routes2011Query groupByNameen() Group by the nameen column
 * @method     Routes2011Query groupByPathattributeid() Group by the pathattributeid column
 * @method     Routes2011Query groupByPathattributename() Group by the pathattributename column
 * @method     Routes2011Query groupByPathattributeename() Group by the pathattributeename column
 * @method     Routes2011Query groupByBuildperiod() Group by the buildperiod column
 * @method     Routes2011Query groupByDeparturezh() Group by the departurezh column
 * @method     Routes2011Query groupByDepartureen() Group by the departureen column
 * @method     Routes2011Query groupByDestinationzh() Group by the destinationzh column
 * @method     Routes2011Query groupByDestinationen() Group by the destinationen column
 * @method     Routes2011Query groupByRealsequence() Group by the realsequence column
 * @method     Routes2011Query groupByDistance() Group by the distance column
 * @method     Routes2011Query groupByGofirstbustime() Group by the gofirstbustime column
 * @method     Routes2011Query groupByBackfirstbustime() Group by the backfirstbustime column
 * @method     Routes2011Query groupByGolastbustime() Group by the golastbustime column
 * @method     Routes2011Query groupByBacklastbustime() Group by the backlastbustime column
 * @method     Routes2011Query groupByOffpeakheadway() Group by the offpeakheadway column
 *
 * @method     Routes2011Query leftJoin($relation) Adds a LEFT JOIN clause to the query
 * @method     Routes2011Query rightJoin($relation) Adds a RIGHT JOIN clause to the query
 * @method     Routes2011Query innerJoin($relation) Adds a INNER JOIN clause to the query
 *
 * @method     Routes2011 findOne(PropelPDO $con = null) Return the first Routes2011 matching the query
 * @method     Routes2011 findOneOrCreate(PropelPDO $con = null) Return the first Routes2011 matching the query, or a new Routes2011 object populated from the query conditions when no match is found
 *
 * @method     Routes2011 findOneById(string $id) Return the first Routes2011 filtered by the id column
 * @method     Routes2011 findOneByRouteid(int $routeid) Return the first Routes2011 filtered by the routeid column
 * @method     Routes2011 findOneByProviderid(int $providerid) Return the first Routes2011 filtered by the providerid column
 * @method     Routes2011 findOneByProvidername(string $providername) Return the first Routes2011 filtered by the providername column
 * @method     Routes2011 findOneByNamezh(string $namezh) Return the first Routes2011 filtered by the namezh column
 * @method     Routes2011 findOneByNameen(string $nameen) Return the first Routes2011 filtered by the nameen column
 * @method     Routes2011 findOneByPathattributeid(int $pathattributeid) Return the first Routes2011 filtered by the pathattributeid column
 * @method     Routes2011 findOneByPathattributename(string $pathattributename) Return the first Routes2011 filtered by the pathattributename column
 * @method     Routes2011 findOneByPathattributeename(string $pathattributeename) Return the first Routes2011 filtered by the pathattributeename column
 * @method     Routes2011 findOneByBuildperiod(int $buildperiod) Return the first Routes2011 filtered by the buildperiod column
 * @method     Routes2011 findOneByDeparturezh(string $departurezh) Return the first Routes2011 filtered by the departurezh column
 * @method     Routes2011 findOneByDepartureen(string $departureen) Return the first Routes2011 filtered by the departureen column
 * @method     Routes2011 findOneByDestinationzh(string $destinationzh) Return the first Routes2011 filtered by the destinationzh column
 * @method     Routes2011 findOneByDestinationen(string $destinationen) Return the first Routes2011 filtered by the destinationen column
 * @method     Routes2011 findOneByRealsequence(int $realsequence) Return the first Routes2011 filtered by the realsequence column
 * @method     Routes2011 findOneByDistance(int $distance) Return the first Routes2011 filtered by the distance column
 * @method     Routes2011 findOneByGofirstbustime(string $gofirstbustime) Return the first Routes2011 filtered by the gofirstbustime column
 * @method     Routes2011 findOneByBackfirstbustime(string $backfirstbustime) Return the first Routes2011 filtered by the backfirstbustime column
 * @method     Routes2011 findOneByGolastbustime(string $golastbustime) Return the first Routes2011 filtered by the golastbustime column
 * @method     Routes2011 findOneByBacklastbustime(string $backlastbustime) Return the first Routes2011 filtered by the backlastbustime column
 * @method     Routes2011 findOneByOffpeakheadway(string $offpeakheadway) Return the first Routes2011 filtered by the offpeakheadway column
 *
 * @method     array findById(string $id) Return Routes2011 objects filtered by the id column
 * @method     array findByRouteid(int $routeid) Return Routes2011 objects filtered by the routeid column
 * @method     array findByProviderid(int $providerid) Return Routes2011 objects filtered by the providerid column
 * @method     array findByProvidername(string $providername) Return Routes2011 objects filtered by the providername column
 * @method     array findByNamezh(string $namezh) Return Routes2011 objects filtered by the namezh column
 * @method     array findByNameen(string $nameen) Return Routes2011 objects filtered by the nameen column
 * @method     array findByPathattributeid(int $pathattributeid) Return Routes2011 objects filtered by the pathattributeid column
 * @method     array findByPathattributename(string $pathattributename) Return Routes2011 objects filtered by the pathattributename column
 * @method     array findByPathattributeename(string $pathattributeename) Return Routes2011 objects filtered by the pathattributeename column
 * @method     array findByBuildperiod(int $buildperiod) Return Routes2011 objects filtered by the buildperiod column
 * @method     array findByDeparturezh(string $departurezh) Return Routes2011 objects filtered by the departurezh column
 * @method     array findByDepartureen(string $departureen) Return Routes2011 objects filtered by the departureen column
 * @method     array findByDestinationzh(string $destinationzh) Return Routes2011 objects filtered by the destinationzh column
 * @method     array findByDestinationen(string $destinationen) Return Routes2011 objects filtered by the destinationen column
 * @method     array findByRealsequence(int $realsequence) Return Routes2011 objects filtered by the realsequence column
 * @method     array findByDistance(int $distance) Return Routes2011 objects filtered by the distance column
 * @method     array findByGofirstbustime(string $gofirstbustime) Return Routes2011 objects filtered by the gofirstbustime column
 * @method     array findByBackfirstbustime(string $backfirstbustime) Return Routes2011 objects filtered by the backfirstbustime column
 * @method     array findByGolastbustime(string $golastbustime) Return Routes2011 objects filtered by the golastbustime column
 * @method     array findByBacklastbustime(string $backlastbustime) Return Routes2011 objects filtered by the backlastbustime column
 * @method     array findByOffpeakheadway(string $offpeakheadway) Return Routes2011 objects filtered by the offpeakheadway column
 *
 * @package    propel.generator.lib.model.om
 */
abstract class BaseRoutes2011Query extends ModelCriteria
{
	
	/**
	 * Initializes internal state of BaseRoutes2011Query object.
	 *
	 * @param     string $dbName The dabase name
	 * @param     string $modelName The phpName of a model, e.g. 'Book'
	 * @param     string $modelAlias The alias for the model in this query, e.g. 'b'
	 */
	public function __construct($dbName = 'propel', $modelName = 'Routes2011', $modelAlias = null)
	{
		parent::__construct($dbName, $modelName, $modelAlias);
	}

	/**
	 * Returns a new Routes2011Query object.
	 *
	 * @param     string $modelAlias The alias of a model in the query
	 * @param     Criteria $criteria Optional Criteria to build the query from
	 *
	 * @return    Routes2011Query
	 */
	public static function create($modelAlias = null, $criteria = null)
	{
		if ($criteria instanceof Routes2011Query) {
			return $criteria;
		}
		$query = new Routes2011Query();
		if (null !== $modelAlias) {
			$query->setModelAlias($modelAlias);
		}
		if ($criteria instanceof Criteria) {
			$query->mergeWith($criteria);
		}
		return $query;
	}

	/**
	 * Find object by primary key.
	 * Propel uses the instance pool to skip the database if the object exists.
	 * Go fast if the query is untouched.
	 *
	 * <code>
	 * $obj  = $c->findPk(12, $con);
	 * </code>
	 *
	 * @param     mixed $key Primary key to use for the query
	 * @param     PropelPDO $con an optional connection object
	 *
	 * @return    Routes2011|array|mixed the result, formatted by the current formatter
	 */
	public function findPk($key, $con = null)
	{
		if ($key === null) {
			return null;
		}
		if ((null !== ($obj = Routes2011Peer::getInstanceFromPool((string) $key))) && !$this->formatter) {
			// the object is alredy in the instance pool
			return $obj;
		}
		if ($con === null) {
			$con = Propel::getConnection(Routes2011Peer::DATABASE_NAME, Propel::CONNECTION_READ);
		}
		$this->basePreSelect($con);
		if ($this->formatter || $this->modelAlias || $this->with || $this->select
		 || $this->selectColumns || $this->asColumns || $this->selectModifiers
		 || $this->map || $this->having || $this->joins) {
			return $this->findPkComplex($key, $con);
		} else {
			return $this->findPkSimple($key, $con);
		}
	}

	/**
	 * Find object by primary key using raw SQL to go fast.
	 * Bypass doSelect() and the object formatter by using generated code.
	 *
	 * @param     mixed $key Primary key to use for the query
	 * @param     PropelPDO $con A connection object
	 *
	 * @return    Routes2011 A model object, or null if the key is not found
	 */
	protected function findPkSimple($key, $con)
	{
		$sql = 'SELECT ID, ROUTEID, PROVIDERID, PROVIDERNAME, NAMEZH, NAMEEN, PATHATTRIBUTEID, PATHATTRIBUTENAME, PATHATTRIBUTEENAME, BUILDPERIOD, DEPARTUREZH, DEPARTUREEN, DESTINATIONZH, DESTINATIONEN, REALSEQUENCE, DISTANCE, GOFIRSTBUSTIME, BACKFIRSTBUSTIME, GOLASTBUSTIME, BACKLASTBUSTIME, OFFPEAKHEADWAY FROM routes_2011 WHERE ID = :p0';
		try {
			$stmt = $con->prepare($sql);
			$stmt->bindValue(':p0', $key, PDO::PARAM_INT);
			$stmt->execute();
		} catch (Exception $e) {
			Propel::log($e->getMessage(), Propel::LOG_ERR);
			throw new PropelException(sprintf('Unable to execute SELECT statement [%s]', $sql), $e);
		}
		$obj = null;
		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$obj = new Routes2011();
			$obj->hydrate($row);
			Routes2011Peer::addInstanceToPool($obj, (string) $row[0]);
		}
		$stmt->closeCursor();

		return $obj;
	}

	/**
	 * Find object by primary key.
	 *
	 * @param     mixed $key Primary key to use for the query
	 * @param     PropelPDO $con A connection object
	 *
	 * @return    Routes2011|array|mixed the result, formatted by the current formatter
	 */
	protected function findPkComplex($key, $con)
	{
		// As the query uses a PK condition, no limit(1) is necessary.
		$criteria = $this->isKeepQuery() ? clone $this : $this;
		$stmt = $criteria
			->filterByPrimaryKey($key)
			->doSelect($con);
		return $criteria->getFormatter()->init($criteria)->formatOne($stmt);
	}

	/**
	 * Find objects by primary key
	 * <code>
	 * $objs = $c->findPks(array(12, 56, 832), $con);
	 * </code>
	 * @param     array $keys Primary keys to use for the query
	 * @param     PropelPDO $con an optional connection object
	 *
	 * @return    PropelObjectCollection|array|mixed the list of results, formatted by the current formatter
	 */
	public function findPks($keys, $con = null)
	{
		if ($con === null) {
			$con = Propel::getConnection($this->getDbName(), Propel::CONNECTION_READ);
		}
		$this->basePreSelect($con);
		$criteria = $this->isKeepQuery() ? clone $this : $this;
		$stmt = $criteria
			->filterByPrimaryKeys($keys)
			->doSelect($con);
		return $criteria->getFormatter()->init($criteria)->format($stmt);
	}

	/**
	 * Filter the query by primary key
	 *
	 * @param     mixed $key Primary key to use for the query
	 *
	 * @return    Routes2011Query The current query, for fluid interface
	 */
	public function filterByPrimaryKey($key)
	{
		return $this->addUsingAlias(Routes2011Peer::ID, $key, Criteria::EQUAL);
	}

	/**
	 * Filter the query by a list of primary keys
	 *
	 * @param     array $keys The list of primary key to use for the query
	 *
	 * @return    Routes2011Query The current query, for fluid interface
	 */
	public function filterByPrimaryKeys($keys)
	{
		return $this->addUsingAlias(Routes2011Peer::ID, $keys, Criteria::IN);
	}

	/**
	 * Filter the query on the id column
	 *
	 * Example usage:
	 * <code>
	 * $query->filterById(1234); // WHERE id = 1234
	 * $query->filterById(array(12, 34)); // WHERE id IN (12, 34)
	 * $query->filterById(array('min' => 12)); // WHERE id > 12
	 * </code>
	 *
	 * @param     mixed $id The value to use as filter.
	 *              Use scalar values for equality.
	 *              Use array values for in_array() equivalent.
	 *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    Routes2011Query The current query, for fluid interface
	 */
	public function filterById($id = null, $comparison = null)
	{
		if (is_array($id) && null === $comparison) {
			$comparison = Criteria::IN;
		}
		return $this->addUsingAlias(Routes2011Peer::ID, $id, $comparison);
	}

	/**
	 * Filter the query on the routeid column
	 *
	 * Example usage:
	 * <code>
	 * $query->filterByRouteid(1234); // WHERE routeid = 1234
	 * $query->filterByRouteid(array(12, 34)); // WHERE routeid IN (12, 34)
	 * $query->filterByRouteid(array('min' => 12)); // WHERE routeid > 12
	 * </code>
	 *
	 * @param     mixed $routeid The value to use as filter.
	 *              Use scalar values for equality.
	 *              Use array values for in_array() equivalent.
	 *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    Routes2011Query The current query, for fluid interface
	 */
	public function filterByRouteid($routeid = null, $comparison = null)
	{
		if (is_array($routeid)) {
			$useMinMax = false;
			if (isset($routeid['min'])) {
				$this->addUsingAlias(Routes2011Peer::ROUTEID, $routeid['min'], Criteria::GREATER_EQUAL);
				$useMinMax = true;
			}
			if (isset($routeid['max'])) {
				$this->addUsingAlias(Routes2011Peer::ROUTEID, $routeid['max'], Criteria::LESS_EQUAL);
				$useMinMax = true;
			}
			if ($useMinMax) {
				return $this;
			}
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
		}
		return $this->addUsingAlias(Routes2011Peer::ROUTEID, $routeid, $comparison);
	}

	/**
	 * Filter the query on the providerid column
	 *
	 * Example usage:
	 * <code>
	 * $query->filterByProviderid(1234); // WHERE providerid = 1234
	 * $query->filterByProviderid(array(12, 34)); // WHERE providerid IN (12, 34)
	 * $query->filterByProviderid(array('min' => 12)); // WHERE providerid > 12
	 * </code>
	 *
	 * @param     mixed $providerid The value to use as filter.
	 *              Use scalar values for equality.
	 *              Use array values for in_array() equivalent.
	 *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    Routes2011Query The current query, for fluid interface
	 */
	public function filterByProviderid($providerid = null, $comparison = null)
	{
		if (is_array($providerid)) {
			$useMinMax = false;
			if (isset($providerid['min'])) {
				$this->addUsingAlias(Routes2011Peer::PROVIDERID, $providerid['min'], Criteria::GREATER_EQUAL);
				$useMinMax = true;
			}
			if (isset($providerid['max'])) {
				$this->addUsingAlias(Routes2011Peer::PROVIDERID, $providerid['max'], Criteria::LESS_EQUAL);
				$useMinMax = true;
			}
			if ($useMinMax) {
				return $this;
			}
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
		}
		return $this->addUsingAlias(Routes2011Peer::PROVIDERID, $providerid, $comparison);
	}

	/**
	 * Filter the query on the providername column
	 *
	 * Example usage:
	 * <code>
	 * $query->filterByProvidername('fooValue');   // WHERE providername = 'fooValue'
	 * $query->filterByProvidername('%fooValue%'); // WHERE providername LIKE '%fooValue%'
	 * </code>
	 *
	 * @param     string $providername The value to use as filter.
	 *              Accepts wildcards (* and % trigger a LIKE)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    Routes2011Query The current query, for fluid interface
	 */
	public function filterByProvidername($providername = null, $comparison = null)
	{
		if (null === $comparison) {
			if (is_array($providername)) {
				$comparison = Criteria::IN;
			} elseif (preg_match('/[\%\*]/', $providername)) {
				$providername = str_replace('*', '%', $providername);
				$comparison = Criteria::LIKE;
			}
		}
		return $this->addUsingAlias(Routes2011Peer::PROVIDERNAME, $providername, $comparison);
	}

	/**
	 * Filter the query on the namezh column
	 *
	 * Example usage:
	 * <code>
	 * $query->filterByNamezh('fooValue');   // WHERE namezh = 'fooValue'
	 * $query->filterByNamezh('%fooValue%'); // WHERE namezh LIKE '%fooValue%'
	 * </code>
	 *
	 * @param     string $namezh The value to use as filter.
	 *              Accepts wildcards (* and % trigger a LIKE)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    Routes2011Query The current query, for fluid interface
	 */
	public function filterByNamezh($namezh = null, $comparison = null)
	{
		if (null === $comparison) {
			if (is_array($namezh)) {
				$comparison = Criteria::IN;
			} elseif (preg_match('/[\%\*]/', $namezh)) {
				$namezh = str_replace('*', '%', $namezh);
				$comparison = Criteria::LIKE;
			}
		}
		return $this->addUsingAlias(Routes2011Peer::NAMEZH, $namezh, $comparison);
	}

	/**
	 * Filter the query on the nameen column
	 *
	 * Example usage:
	 * <code>
	 * $query->filterByNameen('fooValue');   // WHERE nameen = 'fooValue'
	 * $query->filterByNameen('%fooValue%'); // WHERE nameen LIKE '%fooValue%'
	 * </code>
	 *
	 * @param     string $nameen The value to use as filter.
	 *              Accepts wildcards (* and % trigger a LIKE)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    Routes2011Query The current query, for fluid interface
	 */
	public function filterByNameen($nameen = null, $comparison = null)
	{
		if (null === $comparison) {
			if (is_array($nameen)) {
				$comparison = Criteria::IN;
			} elseif (preg_match('/[\%\*]/', $nameen)) {
				$nameen = str_replace('*', '%', $nameen);
				$comparison = Criteria::LIKE;
			}
		}
		return $this->addUsingAlias(Routes2011Peer::NAMEEN, $nameen, $comparison);
	}

	/**
	 * Filter the query on the pathattributeid column
	 *
	 * Example usage:
	 * <code>
	 * $query->filterByPathattributeid(1234); // WHERE pathattributeid = 1234
	 * $query->filterByPathattributeid(array(12, 34)); // WHERE pathattributeid IN (12, 34)
	 * $query->filterByPathattributeid(array('min' => 12)); // WHERE pathattributeid > 12
	 * </code>
	 *
	 * @param     mixed $pathattributeid The value to use as filter.
	 *              Use scalar values for equality.
	 *              Use array values for in_array() equivalent.
	 *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    Routes2011Query The current query, for fluid interface
	 */
	public function filterByPathattributeid($pathattributeid = null, $comparison = null)
	{
		if (is_array($pathattributeid)) {
			$useMinMax = false;
			if (isset($pathattributeid['min'])) {
				$this->addUsingAlias(Routes2011Peer::PATHATTRIBUTEID, $pathattributeid['min'], Criteria::GREATER_EQUAL);
				$useMinMax = true;
			}
			if (isset($pathattributeid['max'])) {
				$this->addUsingAlias(Routes2011Peer::PATHATTRIBUTEID, $pathattributeid['max'], Criteria::LESS_EQUAL);
				$useMinMax = true;
			}
			if ($useMinMax) {
				return $this;
			}
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
		}
		return $this->addUsingAlias(Routes2011Peer::PATHATTRIBUTEID, $pathattributeid, $comparison);
	}

	/**
	 * Filter the query on the pathattributename column
	 *
	 * Example usage:
	 * <code>
	 * $query->filterByPathattributename('fooValue');   // WHERE pathattributename = 'fooValue'
	 * $query->filterByPathattributename('%fooValue%'); // WHERE pathattributename LIKE '%fooValue%'
	 * </code>
	 *
	 * @param     string $pathattributename The value to use as filter.
	 *              Accepts wildcards (* and % trigger a LIKE)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    Routes2011Query The current query, for fluid interface
	 */
	public function filterByPathattributename($pathattributename = null, $comparison = null)
	{
		if (null === $comparison) {
			if (is_array($pathattributename)) {
				$comparison = Criteria::IN;
			} elseif (preg_match('/[\%\*]/', $pathattributename)) {
				$pathattributename = str_replace('*', '%', $pathattributename);
				$comparison = Criteria::LIKE;
			}
		}
		return $this->addUsingAlias(Routes2011Peer::PATHATTRIBUTENAME, $pathattributename, $comparison);
	}

	/**
	 * Filter the query on the pathattributeename column
	 *
	 * Example usage:
	 * <code>
	 * $query->filterByPathattributeename('fooValue');   // WHERE pathattributeename = 'fooValue'
	 * $query->filterByPathattributeename('%fooValue%'); // WHERE pathattributeename LIKE '%fooValue%'
	 * </code>
	 *
	 * @param     string $pathattributeename The value to use as filter.
	 *              Accepts wildcards (* and % trigger a LIKE)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    Routes2011Query The current query, for fluid interface
	 */
	public function filterByPathattributeename($pathattributeename = null, $comparison = null)
	{
		if (null === $comparison) {
			if (is_array($pathattributeename)) {
				$comparison = Criteria::IN;
			} elseif (preg_match('/[\%\*]/', $pathattributeename)) {
				$pathattributeename = str_replace('*', '%', $pathattributeename);
				$comparison = Criteria::LIKE;
			}
		}
		return $this->addUsingAlias(Routes2011Peer::PATHATTRIBUTEENAME, $pathattributeename, $comparison);
	}

	/**
	 * Filter the query on the buildperiod column
	 *
	 * Example usage:
	 * <code>
	 * $query->filterByBuildperiod(1234); // WHERE buildperiod = 1234
	 * $query->filterByBuildperiod(array(12, 34)); // WHERE buildperiod IN (12, 34)
	 * $query->filterByBuildperiod(array('min' => 12)); // WHERE buildperiod > 12
	 * </code>
	 *
	 * @param     mixed $buildperiod The value to use as filter.
	 *              Use scalar values for equality.
	 *              Use array values for in_array() equivalent.
	 *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    Routes2011Query The current query, for fluid interface
	 */
	public function filterByBuildperiod($buildperiod = null, $comparison = null)
	{
		if (is_array($buildperiod)) {
			$useMinMax = false;
			if (isset($buildperiod['min'])) {
				$this->addUsingAlias(Routes2011Peer::BUILDPERIOD, $buildperiod['min'], Criteria::GREATER_EQUAL);
				$useMinMax = true;
			}
			if (isset($buildperiod['max'])) {
				$this->addUsingAlias(Routes2011Peer::BUILDPERIOD, $buildperiod['max'], Criteria::LESS_EQUAL);
				$useMinMax = true;
			}
			if ($useMinMax) {
				return $this;
			}
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
		}
		return $this->addUsingAlias(Routes2011Peer::BUILDPERIOD, $buildperiod, $comparison);
	}

	/**
	 * Filter the query on the departurezh column
	 *
	 * Example usage:
	 * <code>
	 * $query->filterByDeparturezh('fooValue');   // WHERE departurezh = 'fooValue'
	 * $query->filterByDeparturezh('%fooValue%'); // WHERE departurezh LIKE '%fooValue%'
	 * </code>
	 *
	 * @param     string $departurezh The value to use as filter.
	 *              Accepts wildcards (* and % trigger a LIKE)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    Routes2011Query The current query, for fluid interface
	 */
	public function filterByDeparturezh($departurezh = null, $comparison = null)
	{
		if (null === $comparison) {
			if (is_array($departurezh)) {
				$comparison = Criteria::IN;
			} elseif (preg_match('/[\%\*]/', $departurezh)) {
				$departurezh = str_replace('*', '%', $departurezh);
				$comparison = Criteria::LIKE;
			}
		}
		return $this->addUsingAlias(Routes2011Peer::DEPARTUREZH, $departurezh, $comparison);
	}

	/**
	 * Filter the query on the departureen column
	 *
	 * Example usage:
	 * <code>
	 * $query->filterByDepartureen('fooValue');   // WHERE departureen = 'fooValue'
	 * $query->filterByDepartureen('%fooValue%'); // WHERE departureen LIKE '%fooValue%'
	 * </code>
	 *
	 * @param     string $departureen The value to use as filter.
	 *              Accepts wildcards (* and % trigger a LIKE)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    Routes2011Query The current query, for fluid interface
	 */
	public function filterByDepartureen($departureen = null, $comparison = null)
	{
		if (null === $comparison) {
			if (is_array($departureen)) {
				$comparison = Criteria::IN;
			} elseif (preg_match('/[\%\*]/', $departureen)) {
				$departureen = str_replace('*', '%', $departureen);
				$comparison = Criteria::LIKE;
			}
		}
		return $this->addUsingAlias(Routes2011Peer::DEPARTUREEN, $departureen, $comparison);
	}

	/**
	 * Filter the query on the destinationzh column
	 *
	 * Example usage:
	 * <code>
	 * $query->filterByDestinationzh('fooValue');   // WHERE destinationzh = 'fooValue'
	 * $query->filterByDestinationzh('%fooValue%'); // WHERE destinationzh LIKE '%fooValue%'
	 * </code>
	 *
	 * @param     string $destinationzh The value to use as filter.
	 *              Accepts wildcards (* and % trigger a LIKE)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    Routes2011Query The current query, for fluid interface
	 */
	public function filterByDestinationzh($destinationzh = null, $comparison = null)
	{
		if (null === $comparison) {
			if (is_array($destinationzh)) {
				$comparison = Criteria::IN;
			} elseif (preg_match('/[\%\*]/', $destinationzh)) {
				$destinationzh = str_replace('*', '%', $destinationzh);
				$comparison = Criteria::LIKE;
			}
		}
		return $this->addUsingAlias(Routes2011Peer::DESTINATIONZH, $destinationzh, $comparison);
	}

	/**
	 * Filter the query on the destinationen column
	 *
	 * Example usage:
	 * <code>
	 * $query->filterByDestinationen('fooValue');   // WHERE destinationen = 'fooValue'
	 * $query->filterByDestinationen('%fooValue%'); // WHERE destinationen LIKE '%fooValue%'
	 * </code>
	 *
	 * @param     string $destinationen The value to use as filter.
	 *              Accepts wildcards (* and % trigger a LIKE)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    Routes2011Query The current query, for fluid interface
	 */
	public function filterByDestinationen($destinationen = null, $comparison = null)
	{
		if (null === $comparison) {
			if (is_array($destinationen)) {
				$comparison = Criteria::IN;
			} elseif (preg_match('/[\%\*]/', $destinationen)) {
				$destinationen = str_replace('*', '%', $destinationen);
				$comparison = Criteria::LIKE;
			}
		}
		return $this->addUsingAlias(Routes2011Peer::DESTINATIONEN, $destinationen, $comparison);
	}

	/**
	 * Filter the query on the realsequence column
	 *
	 * Example usage:
	 * <code>
	 * $query->filterByRealsequence(1234); // WHERE realsequence = 1234
	 * $query->filterByRealsequence(array(12, 34)); // WHERE realsequence IN (12, 34)
	 * $query->filterByRealsequence(array('min' => 12)); // WHERE realsequence > 12
	 * </code>
	 *
	 * @param     mixed $realsequence The value to use as filter.
	 *              Use scalar values for equality.
	 *              Use array values for in_array() equivalent.
	 *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    Routes2011Query The current query, for fluid interface
	 */
	public function filterByRealsequence($realsequence = null, $comparison = null)
	{
		if (is_array($realsequence)) {
			$useMinMax = false;
			if (isset($realsequence['min'])) {
				$this->addUsingAlias(Routes2011Peer::REALSEQUENCE, $realsequence['min'], Criteria::GREATER_EQUAL);
				$useMinMax = true;
			}
			if (isset($realsequence['max'])) {
				$this->addUsingAlias(Routes2011Peer::REALSEQUENCE, $realsequence['max'], Criteria::LESS_EQUAL);
				$useMinMax = true;
			}
			if ($useMinMax) {
				return $this;
			}
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
		}
		return $this->addUsingAlias(Routes2011Peer::REALSEQUENCE, $realsequence, $comparison);
	}

	/**
	 * Filter the query on the distance column
	 *
	 * Example usage:
	 * <code>
	 * $query->filterByDistance(1234); // WHERE distance = 1234
	 * $query->filterByDistance(array(12, 34)); // WHERE distance IN (12, 34)
	 * $query->filterByDistance(array('min' => 12)); // WHERE distance > 12
	 * </code>
	 *
	 * @param     mixed $distance The value to use as filter.
	 *              Use scalar values for equality.
	 *              Use array values for in_array() equivalent.
	 *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    Routes2011Query The current query, for fluid interface
	 */
	public function filterByDistance($distance = null, $comparison = null)
	{
		if (is_array($distance)) {
			$useMinMax = false;
			if (isset($distance['min'])) {
				$this->addUsingAlias(Routes2011Peer::DISTANCE, $distance['min'], Criteria::GREATER_EQUAL);
				$useMinMax = true;
			}
			if (isset($distance['max'])) {
				$this->addUsingAlias(Routes2011Peer::DISTANCE, $distance['max'], Criteria::LESS_EQUAL);
				$useMinMax = true;
			}
			if ($useMinMax) {
				return $this;
			}
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
		}
		return $this->addUsingAlias(Routes2011Peer::DISTANCE, $distance, $comparison);
	}

	/**
	 * Filter the query on the gofirstbustime column
	 *
	 * Example usage:
	 * <code>
	 * $query->filterByGofirstbustime('fooValue');   // WHERE gofirstbustime = 'fooValue'
	 * $query->filterByGofirstbustime('%fooValue%'); // WHERE gofirstbustime LIKE '%fooValue%'
	 * </code>
	 *
	 * @param     string $gofirstbustime The value to use as filter.
	 *              Accepts wildcards (* and % trigger a LIKE)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    Routes2011Query The current query, for fluid interface
	 */
	public function filterByGofirstbustime($gofirstbustime = null, $comparison = null)
	{
		if (null === $comparison) {
			if (is_array($gofirstbustime)) {
				$comparison = Criteria::IN;
			} elseif (preg_match('/[\%\*]/', $gofirstbustime)) {
				$gofirstbustime = str_replace('*', '%', $gofirstbustime);
				$comparison = Criteria::LIKE;
			}
		}
		return $this->addUsingAlias(Routes2011Peer::GOFIRSTBUSTIME, $gofirstbustime, $comparison);
	}

	/**
	 * Filter the query on the backfirstbustime column
	 *
	 * Example usage:
	 * <code>
	 * $query->filterByBackfirstbustime('fooValue');   // WHERE backfirstbustime = 'fooValue'
	 * $query->filterByBackfirstbustime('%fooValue%'); // WHERE backfirstbustime LIKE '%fooValue%'
	 * </code>
	 *
	 * @param     string $backfirstbustime The value to use as filter.
	 *              Accepts wildcards (* and % trigger a LIKE)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    Routes2011Query The current query, for fluid interface
	 */
	public function filterByBackfirstbustime($backfirstbustime = null, $comparison = null)
	{
		if (null === $comparison) {
			if (is_array($backfirstbustime)) {
				$comparison = Criteria::IN;
			} elseif (preg_match('/[\%\*]/', $backfirstbustime)) {
				$backfirstbustime = str_replace('*', '%', $backfirstbustime);
				$comparison = Criteria::LIKE;
			}
		}
		return $this->addUsingAlias(Routes2011Peer::BACKFIRSTBUSTIME, $backfirstbustime, $comparison);
	}

	/**
	 * Filter the query on the golastbustime column
	 *
	 * Example usage:
	 * <code>
	 * $query->filterByGolastbustime('fooValue');   // WHERE golastbustime = 'fooValue'
	 * $query->filterByGolastbustime('%fooValue%'); // WHERE golastbustime LIKE '%fooValue%'
	 * </code>
	 *
	 * @param     string $golastbustime The value to use as filter.
	 *              Accepts wildcards (* and % trigger a LIKE)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    Routes2011Query The current query, for fluid interface
	 */
	public function filterByGolastbustime($golastbustime = null, $comparison = null)
	{
		if (null === $comparison) {
			if (is_array($golastbustime)) {
				$comparison = Criteria::IN;
			} elseif (preg_match('/[\%\*]/', $golastbustime)) {
				$golastbustime = str_replace('*', '%', $golastbustime);
				$comparison = Criteria::LIKE;
			}
		}
		return $this->addUsingAlias(Routes2011Peer::GOLASTBUSTIME, $golastbustime, $comparison);
	}

	/**
	 * Filter the query on the backlastbustime column
	 *
	 * Example usage:
	 * <code>
	 * $query->filterByBacklastbustime('fooValue');   // WHERE backlastbustime = 'fooValue'
	 * $query->filterByBacklastbustime('%fooValue%'); // WHERE backlastbustime LIKE '%fooValue%'
	 * </code>
	 *
	 * @param     string $backlastbustime The value to use as filter.
	 *              Accepts wildcards (* and % trigger a LIKE)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    Routes2011Query The current query, for fluid interface
	 */
	public function filterByBacklastbustime($backlastbustime = null, $comparison = null)
	{
		if (null === $comparison) {
			if (is_array($backlastbustime)) {
				$comparison = Criteria::IN;
			} elseif (preg_match('/[\%\*]/', $backlastbustime)) {
				$backlastbustime = str_replace('*', '%', $backlastbustime);
				$comparison = Criteria::LIKE;
			}
		}
		return $this->addUsingAlias(Routes2011Peer::BACKLASTBUSTIME, $backlastbustime, $comparison);
	}

	/**
	 * Filter the query on the offpeakheadway column
	 *
	 * Example usage:
	 * <code>
	 * $query->filterByOffpeakheadway('fooValue');   // WHERE offpeakheadway = 'fooValue'
	 * $query->filterByOffpeakheadway('%fooValue%'); // WHERE offpeakheadway LIKE '%fooValue%'
	 * </code>
	 *
	 * @param     string $offpeakheadway The value to use as filter.
	 *              Accepts wildcards (* and % trigger a LIKE)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    Routes2011Query The current query, for fluid interface
	 */
	public function filterByOffpeakheadway($offpeakheadway = null, $comparison = null)
	{
		if (null === $comparison) {
			if (is_array($offpeakheadway)) {
				$comparison = Criteria::IN;
			} elseif (preg_match('/[\%\*]/', $offpeakheadway)) {
				$offpeakheadway = str_replace('*', '%', $offpeakheadway);
				$comparison = Criteria::LIKE;
			}
		}
		return $this->addUsingAlias(Routes2011Peer::OFFPEAKHEADWAY, $offpeakheadway, $comparison);
	}

	/**
	 * Exclude object from result
	 *
	 * @param     Routes2011 $routes2011 Object to remove from the list of results
	 *
	 * @return    Routes2011Query The current query, for fluid interface
	 */
	public function prune($routes2011 = null)
	{
		if ($routes2011) {
			$this->addUsingAlias(Routes2011Peer::ID, $routes2011->getId(), Criteria::NOT_EQUAL);
		}

		return $this;
	}

} // BaseRoutes2011Query