<?php


/**
 * Base class that represents a query for the 'time_estimations_2011' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.6.3 on:
 *
 * Wed Jan 11 23:40:55 2012
 *
 * @method     TimeEstimations2011Query orderById($order = Criteria::ASC) Order by the id column
 * @method     TimeEstimations2011Query orderByStopid($order = Criteria::ASC) Order by the stopid column
 * @method     TimeEstimations2011Query orderByRouteid($order = Criteria::ASC) Order by the routeid column
 * @method     TimeEstimations2011Query orderByEstimatetime($order = Criteria::ASC) Order by the estimatetime column
 * @method     TimeEstimations2011Query orderByGoback($order = Criteria::ASC) Order by the goback column
 * @method     TimeEstimations2011Query orderByTime($order = Criteria::ASC) Order by the time column
 *
 * @method     TimeEstimations2011Query groupById() Group by the id column
 * @method     TimeEstimations2011Query groupByStopid() Group by the stopid column
 * @method     TimeEstimations2011Query groupByRouteid() Group by the routeid column
 * @method     TimeEstimations2011Query groupByEstimatetime() Group by the estimatetime column
 * @method     TimeEstimations2011Query groupByGoback() Group by the goback column
 * @method     TimeEstimations2011Query groupByTime() Group by the time column
 *
 * @method     TimeEstimations2011Query leftJoin($relation) Adds a LEFT JOIN clause to the query
 * @method     TimeEstimations2011Query rightJoin($relation) Adds a RIGHT JOIN clause to the query
 * @method     TimeEstimations2011Query innerJoin($relation) Adds a INNER JOIN clause to the query
 *
 * @method     TimeEstimations2011 findOne(PropelPDO $con = null) Return the first TimeEstimations2011 matching the query
 * @method     TimeEstimations2011 findOneOrCreate(PropelPDO $con = null) Return the first TimeEstimations2011 matching the query, or a new TimeEstimations2011 object populated from the query conditions when no match is found
 *
 * @method     TimeEstimations2011 findOneById(string $id) Return the first TimeEstimations2011 filtered by the id column
 * @method     TimeEstimations2011 findOneByStopid(int $stopid) Return the first TimeEstimations2011 filtered by the stopid column
 * @method     TimeEstimations2011 findOneByRouteid(int $routeid) Return the first TimeEstimations2011 filtered by the routeid column
 * @method     TimeEstimations2011 findOneByEstimatetime(int $estimatetime) Return the first TimeEstimations2011 filtered by the estimatetime column
 * @method     TimeEstimations2011 findOneByGoback(int $goback) Return the first TimeEstimations2011 filtered by the goback column
 * @method     TimeEstimations2011 findOneByTime(string $time) Return the first TimeEstimations2011 filtered by the time column
 *
 * @method     array findById(string $id) Return TimeEstimations2011 objects filtered by the id column
 * @method     array findByStopid(int $stopid) Return TimeEstimations2011 objects filtered by the stopid column
 * @method     array findByRouteid(int $routeid) Return TimeEstimations2011 objects filtered by the routeid column
 * @method     array findByEstimatetime(int $estimatetime) Return TimeEstimations2011 objects filtered by the estimatetime column
 * @method     array findByGoback(int $goback) Return TimeEstimations2011 objects filtered by the goback column
 * @method     array findByTime(string $time) Return TimeEstimations2011 objects filtered by the time column
 *
 * @package    propel.generator.lib.model.om
 */
abstract class BaseTimeEstimations2011Query extends ModelCriteria
{
	
	/**
	 * Initializes internal state of BaseTimeEstimations2011Query object.
	 *
	 * @param     string $dbName The dabase name
	 * @param     string $modelName The phpName of a model, e.g. 'Book'
	 * @param     string $modelAlias The alias for the model in this query, e.g. 'b'
	 */
	public function __construct($dbName = 'propel', $modelName = 'TimeEstimations2011', $modelAlias = null)
	{
		parent::__construct($dbName, $modelName, $modelAlias);
	}

	/**
	 * Returns a new TimeEstimations2011Query object.
	 *
	 * @param     string $modelAlias The alias of a model in the query
	 * @param     Criteria $criteria Optional Criteria to build the query from
	 *
	 * @return    TimeEstimations2011Query
	 */
	public static function create($modelAlias = null, $criteria = null)
	{
		if ($criteria instanceof TimeEstimations2011Query) {
			return $criteria;
		}
		$query = new TimeEstimations2011Query();
		if (null !== $modelAlias) {
			$query->setModelAlias($modelAlias);
		}
		if ($criteria instanceof Criteria) {
			$query->mergeWith($criteria);
		}
		return $query;
	}

	/**
	 * Find object by primary key.
	 * Propel uses the instance pool to skip the database if the object exists.
	 * Go fast if the query is untouched.
	 *
	 * <code>
	 * $obj  = $c->findPk(12, $con);
	 * </code>
	 *
	 * @param     mixed $key Primary key to use for the query
	 * @param     PropelPDO $con an optional connection object
	 *
	 * @return    TimeEstimations2011|array|mixed the result, formatted by the current formatter
	 */
	public function findPk($key, $con = null)
	{
		if ($key === null) {
			return null;
		}
		if ((null !== ($obj = TimeEstimations2011Peer::getInstanceFromPool((string) $key))) && !$this->formatter) {
			// the object is alredy in the instance pool
			return $obj;
		}
		if ($con === null) {
			$con = Propel::getConnection(TimeEstimations2011Peer::DATABASE_NAME, Propel::CONNECTION_READ);
		}
		$this->basePreSelect($con);
		if ($this->formatter || $this->modelAlias || $this->with || $this->select
		 || $this->selectColumns || $this->asColumns || $this->selectModifiers
		 || $this->map || $this->having || $this->joins) {
			return $this->findPkComplex($key, $con);
		} else {
			return $this->findPkSimple($key, $con);
		}
	}

	/**
	 * Find object by primary key using raw SQL to go fast.
	 * Bypass doSelect() and the object formatter by using generated code.
	 *
	 * @param     mixed $key Primary key to use for the query
	 * @param     PropelPDO $con A connection object
	 *
	 * @return    TimeEstimations2011 A model object, or null if the key is not found
	 */
	protected function findPkSimple($key, $con)
	{
		$sql = 'SELECT ID, STOPID, ROUTEID, ESTIMATETIME, GOBACK, TIME FROM time_estimations_2011 WHERE ID = :p0';
		try {
			$stmt = $con->prepare($sql);
			$stmt->bindValue(':p0', $key, PDO::PARAM_INT);
			$stmt->execute();
		} catch (Exception $e) {
			Propel::log($e->getMessage(), Propel::LOG_ERR);
			throw new PropelException(sprintf('Unable to execute SELECT statement [%s]', $sql), $e);
		}
		$obj = null;
		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$obj = new TimeEstimations2011();
			$obj->hydrate($row);
			TimeEstimations2011Peer::addInstanceToPool($obj, (string) $row[0]);
		}
		$stmt->closeCursor();

		return $obj;
	}

	/**
	 * Find object by primary key.
	 *
	 * @param     mixed $key Primary key to use for the query
	 * @param     PropelPDO $con A connection object
	 *
	 * @return    TimeEstimations2011|array|mixed the result, formatted by the current formatter
	 */
	protected function findPkComplex($key, $con)
	{
		// As the query uses a PK condition, no limit(1) is necessary.
		$criteria = $this->isKeepQuery() ? clone $this : $this;
		$stmt = $criteria
			->filterByPrimaryKey($key)
			->doSelect($con);
		return $criteria->getFormatter()->init($criteria)->formatOne($stmt);
	}

	/**
	 * Find objects by primary key
	 * <code>
	 * $objs = $c->findPks(array(12, 56, 832), $con);
	 * </code>
	 * @param     array $keys Primary keys to use for the query
	 * @param     PropelPDO $con an optional connection object
	 *
	 * @return    PropelObjectCollection|array|mixed the list of results, formatted by the current formatter
	 */
	public function findPks($keys, $con = null)
	{
		if ($con === null) {
			$con = Propel::getConnection($this->getDbName(), Propel::CONNECTION_READ);
		}
		$this->basePreSelect($con);
		$criteria = $this->isKeepQuery() ? clone $this : $this;
		$stmt = $criteria
			->filterByPrimaryKeys($keys)
			->doSelect($con);
		return $criteria->getFormatter()->init($criteria)->format($stmt);
	}

	/**
	 * Filter the query by primary key
	 *
	 * @param     mixed $key Primary key to use for the query
	 *
	 * @return    TimeEstimations2011Query The current query, for fluid interface
	 */
	public function filterByPrimaryKey($key)
	{
		return $this->addUsingAlias(TimeEstimations2011Peer::ID, $key, Criteria::EQUAL);
	}

	/**
	 * Filter the query by a list of primary keys
	 *
	 * @param     array $keys The list of primary key to use for the query
	 *
	 * @return    TimeEstimations2011Query The current query, for fluid interface
	 */
	public function filterByPrimaryKeys($keys)
	{
		return $this->addUsingAlias(TimeEstimations2011Peer::ID, $keys, Criteria::IN);
	}

	/**
	 * Filter the query on the id column
	 *
	 * Example usage:
	 * <code>
	 * $query->filterById(1234); // WHERE id = 1234
	 * $query->filterById(array(12, 34)); // WHERE id IN (12, 34)
	 * $query->filterById(array('min' => 12)); // WHERE id > 12
	 * </code>
	 *
	 * @param     mixed $id The value to use as filter.
	 *              Use scalar values for equality.
	 *              Use array values for in_array() equivalent.
	 *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    TimeEstimations2011Query The current query, for fluid interface
	 */
	public function filterById($id = null, $comparison = null)
	{
		if (is_array($id) && null === $comparison) {
			$comparison = Criteria::IN;
		}
		return $this->addUsingAlias(TimeEstimations2011Peer::ID, $id, $comparison);
	}

	/**
	 * Filter the query on the stopid column
	 *
	 * Example usage:
	 * <code>
	 * $query->filterByStopid(1234); // WHERE stopid = 1234
	 * $query->filterByStopid(array(12, 34)); // WHERE stopid IN (12, 34)
	 * $query->filterByStopid(array('min' => 12)); // WHERE stopid > 12
	 * </code>
	 *
	 * @param     mixed $stopid The value to use as filter.
	 *              Use scalar values for equality.
	 *              Use array values for in_array() equivalent.
	 *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    TimeEstimations2011Query The current query, for fluid interface
	 */
	public function filterByStopid($stopid = null, $comparison = null)
	{
		if (is_array($stopid)) {
			$useMinMax = false;
			if (isset($stopid['min'])) {
				$this->addUsingAlias(TimeEstimations2011Peer::STOPID, $stopid['min'], Criteria::GREATER_EQUAL);
				$useMinMax = true;
			}
			if (isset($stopid['max'])) {
				$this->addUsingAlias(TimeEstimations2011Peer::STOPID, $stopid['max'], Criteria::LESS_EQUAL);
				$useMinMax = true;
			}
			if ($useMinMax) {
				return $this;
			}
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
		}
		return $this->addUsingAlias(TimeEstimations2011Peer::STOPID, $stopid, $comparison);
	}

	/**
	 * Filter the query on the routeid column
	 *
	 * Example usage:
	 * <code>
	 * $query->filterByRouteid(1234); // WHERE routeid = 1234
	 * $query->filterByRouteid(array(12, 34)); // WHERE routeid IN (12, 34)
	 * $query->filterByRouteid(array('min' => 12)); // WHERE routeid > 12
	 * </code>
	 *
	 * @param     mixed $routeid The value to use as filter.
	 *              Use scalar values for equality.
	 *              Use array values for in_array() equivalent.
	 *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    TimeEstimations2011Query The current query, for fluid interface
	 */
	public function filterByRouteid($routeid = null, $comparison = null)
	{
		if (is_array($routeid)) {
			$useMinMax = false;
			if (isset($routeid['min'])) {
				$this->addUsingAlias(TimeEstimations2011Peer::ROUTEID, $routeid['min'], Criteria::GREATER_EQUAL);
				$useMinMax = true;
			}
			if (isset($routeid['max'])) {
				$this->addUsingAlias(TimeEstimations2011Peer::ROUTEID, $routeid['max'], Criteria::LESS_EQUAL);
				$useMinMax = true;
			}
			if ($useMinMax) {
				return $this;
			}
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
		}
		return $this->addUsingAlias(TimeEstimations2011Peer::ROUTEID, $routeid, $comparison);
	}

	/**
	 * Filter the query on the estimatetime column
	 *
	 * Example usage:
	 * <code>
	 * $query->filterByEstimatetime(1234); // WHERE estimatetime = 1234
	 * $query->filterByEstimatetime(array(12, 34)); // WHERE estimatetime IN (12, 34)
	 * $query->filterByEstimatetime(array('min' => 12)); // WHERE estimatetime > 12
	 * </code>
	 *
	 * @param     mixed $estimatetime The value to use as filter.
	 *              Use scalar values for equality.
	 *              Use array values for in_array() equivalent.
	 *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    TimeEstimations2011Query The current query, for fluid interface
	 */
	public function filterByEstimatetime($estimatetime = null, $comparison = null)
	{
		if (is_array($estimatetime)) {
			$useMinMax = false;
			if (isset($estimatetime['min'])) {
				$this->addUsingAlias(TimeEstimations2011Peer::ESTIMATETIME, $estimatetime['min'], Criteria::GREATER_EQUAL);
				$useMinMax = true;
			}
			if (isset($estimatetime['max'])) {
				$this->addUsingAlias(TimeEstimations2011Peer::ESTIMATETIME, $estimatetime['max'], Criteria::LESS_EQUAL);
				$useMinMax = true;
			}
			if ($useMinMax) {
				return $this;
			}
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
		}
		return $this->addUsingAlias(TimeEstimations2011Peer::ESTIMATETIME, $estimatetime, $comparison);
	}

	/**
	 * Filter the query on the goback column
	 *
	 * Example usage:
	 * <code>
	 * $query->filterByGoback(1234); // WHERE goback = 1234
	 * $query->filterByGoback(array(12, 34)); // WHERE goback IN (12, 34)
	 * $query->filterByGoback(array('min' => 12)); // WHERE goback > 12
	 * </code>
	 *
	 * @param     mixed $goback The value to use as filter.
	 *              Use scalar values for equality.
	 *              Use array values for in_array() equivalent.
	 *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    TimeEstimations2011Query The current query, for fluid interface
	 */
	public function filterByGoback($goback = null, $comparison = null)
	{
		if (is_array($goback)) {
			$useMinMax = false;
			if (isset($goback['min'])) {
				$this->addUsingAlias(TimeEstimations2011Peer::GOBACK, $goback['min'], Criteria::GREATER_EQUAL);
				$useMinMax = true;
			}
			if (isset($goback['max'])) {
				$this->addUsingAlias(TimeEstimations2011Peer::GOBACK, $goback['max'], Criteria::LESS_EQUAL);
				$useMinMax = true;
			}
			if ($useMinMax) {
				return $this;
			}
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
		}
		return $this->addUsingAlias(TimeEstimations2011Peer::GOBACK, $goback, $comparison);
	}

	/**
	 * Filter the query on the time column
	 *
	 * Example usage:
	 * <code>
	 * $query->filterByTime('2011-03-14'); // WHERE time = '2011-03-14'
	 * $query->filterByTime('now'); // WHERE time = '2011-03-14'
	 * $query->filterByTime(array('max' => 'yesterday')); // WHERE time > '2011-03-13'
	 * </code>
	 *
	 * @param     mixed $time The value to use as filter.
	 *              Values can be integers (unix timestamps), DateTime objects, or strings.
	 *              Empty strings are treated as NULL.
	 *              Use scalar values for equality.
	 *              Use array values for in_array() equivalent.
	 *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    TimeEstimations2011Query The current query, for fluid interface
	 */
	public function filterByTime($time = null, $comparison = null)
	{
		if (is_array($time)) {
			$useMinMax = false;
			if (isset($time['min'])) {
				$this->addUsingAlias(TimeEstimations2011Peer::TIME, $time['min'], Criteria::GREATER_EQUAL);
				$useMinMax = true;
			}
			if (isset($time['max'])) {
				$this->addUsingAlias(TimeEstimations2011Peer::TIME, $time['max'], Criteria::LESS_EQUAL);
				$useMinMax = true;
			}
			if ($useMinMax) {
				return $this;
			}
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
		}
		return $this->addUsingAlias(TimeEstimations2011Peer::TIME, $time, $comparison);
	}

	/**
	 * Exclude object from result
	 *
	 * @param     TimeEstimations2011 $timeEstimations2011 Object to remove from the list of results
	 *
	 * @return    TimeEstimations2011Query The current query, for fluid interface
	 */
	public function prune($timeEstimations2011 = null)
	{
		if ($timeEstimations2011) {
			$this->addUsingAlias(TimeEstimations2011Peer::ID, $timeEstimations2011->getId(), Criteria::NOT_EQUAL);
		}

		return $this;
	}

} // BaseTimeEstimations2011Query