<?php


/**
 * Base class that represents a query for the 'buses_2011_01' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.6.3 on:
 *
 * Wed Jan 11 23:40:55 2012
 *
 * @method     Buses201101Query orderById($order = Criteria::ASC) Order by the id column
 * @method     Buses201101Query orderByStationid($order = Criteria::ASC) Order by the stationid column
 * @method     Buses201101Query orderByCartype($order = Criteria::ASC) Order by the cartype column
 * @method     Buses201101Query orderByBusid($order = Criteria::ASC) Order by the busid column
 * @method     Buses201101Query orderByProviderid($order = Criteria::ASC) Order by the providerid column
 * @method     Buses201101Query orderByCarid($order = Criteria::ASC) Order by the carid column
 * @method     Buses201101Query orderByDutystatus($order = Criteria::ASC) Order by the dutystatus column
 * @method     Buses201101Query orderByBusstatus($order = Criteria::ASC) Order by the busstatus column
 * @method     Buses201101Query orderByRouteid($order = Criteria::ASC) Order by the routeid column
 * @method     Buses201101Query orderByGoback($order = Criteria::ASC) Order by the goback column
 * @method     Buses201101Query orderByLongitude($order = Criteria::ASC) Order by the longitude column
 * @method     Buses201101Query orderByLatitude($order = Criteria::ASC) Order by the latitude column
 * @method     Buses201101Query orderBySpeed($order = Criteria::ASC) Order by the speed column
 * @method     Buses201101Query orderByAzimuth($order = Criteria::ASC) Order by the azimuth column
 * @method     Buses201101Query orderByDatatime($order = Criteria::ASC) Order by the datatime column
 *
 * @method     Buses201101Query groupById() Group by the id column
 * @method     Buses201101Query groupByStationid() Group by the stationid column
 * @method     Buses201101Query groupByCartype() Group by the cartype column
 * @method     Buses201101Query groupByBusid() Group by the busid column
 * @method     Buses201101Query groupByProviderid() Group by the providerid column
 * @method     Buses201101Query groupByCarid() Group by the carid column
 * @method     Buses201101Query groupByDutystatus() Group by the dutystatus column
 * @method     Buses201101Query groupByBusstatus() Group by the busstatus column
 * @method     Buses201101Query groupByRouteid() Group by the routeid column
 * @method     Buses201101Query groupByGoback() Group by the goback column
 * @method     Buses201101Query groupByLongitude() Group by the longitude column
 * @method     Buses201101Query groupByLatitude() Group by the latitude column
 * @method     Buses201101Query groupBySpeed() Group by the speed column
 * @method     Buses201101Query groupByAzimuth() Group by the azimuth column
 * @method     Buses201101Query groupByDatatime() Group by the datatime column
 *
 * @method     Buses201101Query leftJoin($relation) Adds a LEFT JOIN clause to the query
 * @method     Buses201101Query rightJoin($relation) Adds a RIGHT JOIN clause to the query
 * @method     Buses201101Query innerJoin($relation) Adds a INNER JOIN clause to the query
 *
 * @method     Buses201101 findOne(PropelPDO $con = null) Return the first Buses201101 matching the query
 * @method     Buses201101 findOneOrCreate(PropelPDO $con = null) Return the first Buses201101 matching the query, or a new Buses201101 object populated from the query conditions when no match is found
 *
 * @method     Buses201101 findOneById(string $id) Return the first Buses201101 filtered by the id column
 * @method     Buses201101 findOneByStationid(int $stationid) Return the first Buses201101 filtered by the stationid column
 * @method     Buses201101 findOneByCartype(int $cartype) Return the first Buses201101 filtered by the cartype column
 * @method     Buses201101 findOneByBusid(string $busid) Return the first Buses201101 filtered by the busid column
 * @method     Buses201101 findOneByProviderid(int $providerid) Return the first Buses201101 filtered by the providerid column
 * @method     Buses201101 findOneByCarid(int $carid) Return the first Buses201101 filtered by the carid column
 * @method     Buses201101 findOneByDutystatus(int $dutystatus) Return the first Buses201101 filtered by the dutystatus column
 * @method     Buses201101 findOneByBusstatus(int $busstatus) Return the first Buses201101 filtered by the busstatus column
 * @method     Buses201101 findOneByRouteid(int $routeid) Return the first Buses201101 filtered by the routeid column
 * @method     Buses201101 findOneByGoback(int $goback) Return the first Buses201101 filtered by the goback column
 * @method     Buses201101 findOneByLongitude(double $longitude) Return the first Buses201101 filtered by the longitude column
 * @method     Buses201101 findOneByLatitude(double $latitude) Return the first Buses201101 filtered by the latitude column
 * @method     Buses201101 findOneBySpeed(double $speed) Return the first Buses201101 filtered by the speed column
 * @method     Buses201101 findOneByAzimuth(double $azimuth) Return the first Buses201101 filtered by the azimuth column
 * @method     Buses201101 findOneByDatatime(string $datatime) Return the first Buses201101 filtered by the datatime column
 *
 * @method     array findById(string $id) Return Buses201101 objects filtered by the id column
 * @method     array findByStationid(int $stationid) Return Buses201101 objects filtered by the stationid column
 * @method     array findByCartype(int $cartype) Return Buses201101 objects filtered by the cartype column
 * @method     array findByBusid(string $busid) Return Buses201101 objects filtered by the busid column
 * @method     array findByProviderid(int $providerid) Return Buses201101 objects filtered by the providerid column
 * @method     array findByCarid(int $carid) Return Buses201101 objects filtered by the carid column
 * @method     array findByDutystatus(int $dutystatus) Return Buses201101 objects filtered by the dutystatus column
 * @method     array findByBusstatus(int $busstatus) Return Buses201101 objects filtered by the busstatus column
 * @method     array findByRouteid(int $routeid) Return Buses201101 objects filtered by the routeid column
 * @method     array findByGoback(int $goback) Return Buses201101 objects filtered by the goback column
 * @method     array findByLongitude(double $longitude) Return Buses201101 objects filtered by the longitude column
 * @method     array findByLatitude(double $latitude) Return Buses201101 objects filtered by the latitude column
 * @method     array findBySpeed(double $speed) Return Buses201101 objects filtered by the speed column
 * @method     array findByAzimuth(double $azimuth) Return Buses201101 objects filtered by the azimuth column
 * @method     array findByDatatime(string $datatime) Return Buses201101 objects filtered by the datatime column
 *
 * @package    propel.generator.lib.model.om
 */
abstract class BaseBuses201101Query extends ModelCriteria
{
	
	/**
	 * Initializes internal state of BaseBuses201101Query object.
	 *
	 * @param     string $dbName The dabase name
	 * @param     string $modelName The phpName of a model, e.g. 'Book'
	 * @param     string $modelAlias The alias for the model in this query, e.g. 'b'
	 */
	public function __construct($dbName = 'propel', $modelName = 'Buses201101', $modelAlias = null)
	{
		parent::__construct($dbName, $modelName, $modelAlias);
	}

	/**
	 * Returns a new Buses201101Query object.
	 *
	 * @param     string $modelAlias The alias of a model in the query
	 * @param     Criteria $criteria Optional Criteria to build the query from
	 *
	 * @return    Buses201101Query
	 */
	public static function create($modelAlias = null, $criteria = null)
	{
		if ($criteria instanceof Buses201101Query) {
			return $criteria;
		}
		$query = new Buses201101Query();
		if (null !== $modelAlias) {
			$query->setModelAlias($modelAlias);
		}
		if ($criteria instanceof Criteria) {
			$query->mergeWith($criteria);
		}
		return $query;
	}

	/**
	 * Find object by primary key.
	 * Propel uses the instance pool to skip the database if the object exists.
	 * Go fast if the query is untouched.
	 *
	 * <code>
	 * $obj  = $c->findPk(12, $con);
	 * </code>
	 *
	 * @param     mixed $key Primary key to use for the query
	 * @param     PropelPDO $con an optional connection object
	 *
	 * @return    Buses201101|array|mixed the result, formatted by the current formatter
	 */
	public function findPk($key, $con = null)
	{
		if ($key === null) {
			return null;
		}
		if ((null !== ($obj = Buses201101Peer::getInstanceFromPool((string) $key))) && !$this->formatter) {
			// the object is alredy in the instance pool
			return $obj;
		}
		if ($con === null) {
			$con = Propel::getConnection(Buses201101Peer::DATABASE_NAME, Propel::CONNECTION_READ);
		}
		$this->basePreSelect($con);
		if ($this->formatter || $this->modelAlias || $this->with || $this->select
		 || $this->selectColumns || $this->asColumns || $this->selectModifiers
		 || $this->map || $this->having || $this->joins) {
			return $this->findPkComplex($key, $con);
		} else {
			return $this->findPkSimple($key, $con);
		}
	}

	/**
	 * Find object by primary key using raw SQL to go fast.
	 * Bypass doSelect() and the object formatter by using generated code.
	 *
	 * @param     mixed $key Primary key to use for the query
	 * @param     PropelPDO $con A connection object
	 *
	 * @return    Buses201101 A model object, or null if the key is not found
	 */
	protected function findPkSimple($key, $con)
	{
		$sql = 'SELECT ID, STATIONID, CARTYPE, BUSID, PROVIDERID, CARID, DUTYSTATUS, BUSSTATUS, ROUTEID, GOBACK, LONGITUDE, LATITUDE, SPEED, AZIMUTH, DATATIME FROM buses_2011_01 WHERE ID = :p0';
		try {
			$stmt = $con->prepare($sql);
			$stmt->bindValue(':p0', $key, PDO::PARAM_INT);
			$stmt->execute();
		} catch (Exception $e) {
			Propel::log($e->getMessage(), Propel::LOG_ERR);
			throw new PropelException(sprintf('Unable to execute SELECT statement [%s]', $sql), $e);
		}
		$obj = null;
		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$obj = new Buses201101();
			$obj->hydrate($row);
			Buses201101Peer::addInstanceToPool($obj, (string) $row[0]);
		}
		$stmt->closeCursor();

		return $obj;
	}

	/**
	 * Find object by primary key.
	 *
	 * @param     mixed $key Primary key to use for the query
	 * @param     PropelPDO $con A connection object
	 *
	 * @return    Buses201101|array|mixed the result, formatted by the current formatter
	 */
	protected function findPkComplex($key, $con)
	{
		// As the query uses a PK condition, no limit(1) is necessary.
		$criteria = $this->isKeepQuery() ? clone $this : $this;
		$stmt = $criteria
			->filterByPrimaryKey($key)
			->doSelect($con);
		return $criteria->getFormatter()->init($criteria)->formatOne($stmt);
	}

	/**
	 * Find objects by primary key
	 * <code>
	 * $objs = $c->findPks(array(12, 56, 832), $con);
	 * </code>
	 * @param     array $keys Primary keys to use for the query
	 * @param     PropelPDO $con an optional connection object
	 *
	 * @return    PropelObjectCollection|array|mixed the list of results, formatted by the current formatter
	 */
	public function findPks($keys, $con = null)
	{
		if ($con === null) {
			$con = Propel::getConnection($this->getDbName(), Propel::CONNECTION_READ);
		}
		$this->basePreSelect($con);
		$criteria = $this->isKeepQuery() ? clone $this : $this;
		$stmt = $criteria
			->filterByPrimaryKeys($keys)
			->doSelect($con);
		return $criteria->getFormatter()->init($criteria)->format($stmt);
	}

	/**
	 * Filter the query by primary key
	 *
	 * @param     mixed $key Primary key to use for the query
	 *
	 * @return    Buses201101Query The current query, for fluid interface
	 */
	public function filterByPrimaryKey($key)
	{
		return $this->addUsingAlias(Buses201101Peer::ID, $key, Criteria::EQUAL);
	}

	/**
	 * Filter the query by a list of primary keys
	 *
	 * @param     array $keys The list of primary key to use for the query
	 *
	 * @return    Buses201101Query The current query, for fluid interface
	 */
	public function filterByPrimaryKeys($keys)
	{
		return $this->addUsingAlias(Buses201101Peer::ID, $keys, Criteria::IN);
	}

	/**
	 * Filter the query on the id column
	 *
	 * Example usage:
	 * <code>
	 * $query->filterById(1234); // WHERE id = 1234
	 * $query->filterById(array(12, 34)); // WHERE id IN (12, 34)
	 * $query->filterById(array('min' => 12)); // WHERE id > 12
	 * </code>
	 *
	 * @param     mixed $id The value to use as filter.
	 *              Use scalar values for equality.
	 *              Use array values for in_array() equivalent.
	 *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    Buses201101Query The current query, for fluid interface
	 */
	public function filterById($id = null, $comparison = null)
	{
		if (is_array($id) && null === $comparison) {
			$comparison = Criteria::IN;
		}
		return $this->addUsingAlias(Buses201101Peer::ID, $id, $comparison);
	}

	/**
	 * Filter the query on the stationid column
	 *
	 * Example usage:
	 * <code>
	 * $query->filterByStationid(1234); // WHERE stationid = 1234
	 * $query->filterByStationid(array(12, 34)); // WHERE stationid IN (12, 34)
	 * $query->filterByStationid(array('min' => 12)); // WHERE stationid > 12
	 * </code>
	 *
	 * @param     mixed $stationid The value to use as filter.
	 *              Use scalar values for equality.
	 *              Use array values for in_array() equivalent.
	 *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    Buses201101Query The current query, for fluid interface
	 */
	public function filterByStationid($stationid = null, $comparison = null)
	{
		if (is_array($stationid)) {
			$useMinMax = false;
			if (isset($stationid['min'])) {
				$this->addUsingAlias(Buses201101Peer::STATIONID, $stationid['min'], Criteria::GREATER_EQUAL);
				$useMinMax = true;
			}
			if (isset($stationid['max'])) {
				$this->addUsingAlias(Buses201101Peer::STATIONID, $stationid['max'], Criteria::LESS_EQUAL);
				$useMinMax = true;
			}
			if ($useMinMax) {
				return $this;
			}
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
		}
		return $this->addUsingAlias(Buses201101Peer::STATIONID, $stationid, $comparison);
	}

	/**
	 * Filter the query on the cartype column
	 *
	 * Example usage:
	 * <code>
	 * $query->filterByCartype(1234); // WHERE cartype = 1234
	 * $query->filterByCartype(array(12, 34)); // WHERE cartype IN (12, 34)
	 * $query->filterByCartype(array('min' => 12)); // WHERE cartype > 12
	 * </code>
	 *
	 * @param     mixed $cartype The value to use as filter.
	 *              Use scalar values for equality.
	 *              Use array values for in_array() equivalent.
	 *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    Buses201101Query The current query, for fluid interface
	 */
	public function filterByCartype($cartype = null, $comparison = null)
	{
		if (is_array($cartype)) {
			$useMinMax = false;
			if (isset($cartype['min'])) {
				$this->addUsingAlias(Buses201101Peer::CARTYPE, $cartype['min'], Criteria::GREATER_EQUAL);
				$useMinMax = true;
			}
			if (isset($cartype['max'])) {
				$this->addUsingAlias(Buses201101Peer::CARTYPE, $cartype['max'], Criteria::LESS_EQUAL);
				$useMinMax = true;
			}
			if ($useMinMax) {
				return $this;
			}
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
		}
		return $this->addUsingAlias(Buses201101Peer::CARTYPE, $cartype, $comparison);
	}

	/**
	 * Filter the query on the busid column
	 *
	 * Example usage:
	 * <code>
	 * $query->filterByBusid('fooValue');   // WHERE busid = 'fooValue'
	 * $query->filterByBusid('%fooValue%'); // WHERE busid LIKE '%fooValue%'
	 * </code>
	 *
	 * @param     string $busid The value to use as filter.
	 *              Accepts wildcards (* and % trigger a LIKE)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    Buses201101Query The current query, for fluid interface
	 */
	public function filterByBusid($busid = null, $comparison = null)
	{
		if (null === $comparison) {
			if (is_array($busid)) {
				$comparison = Criteria::IN;
			} elseif (preg_match('/[\%\*]/', $busid)) {
				$busid = str_replace('*', '%', $busid);
				$comparison = Criteria::LIKE;
			}
		}
		return $this->addUsingAlias(Buses201101Peer::BUSID, $busid, $comparison);
	}

	/**
	 * Filter the query on the providerid column
	 *
	 * Example usage:
	 * <code>
	 * $query->filterByProviderid(1234); // WHERE providerid = 1234
	 * $query->filterByProviderid(array(12, 34)); // WHERE providerid IN (12, 34)
	 * $query->filterByProviderid(array('min' => 12)); // WHERE providerid > 12
	 * </code>
	 *
	 * @param     mixed $providerid The value to use as filter.
	 *              Use scalar values for equality.
	 *              Use array values for in_array() equivalent.
	 *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    Buses201101Query The current query, for fluid interface
	 */
	public function filterByProviderid($providerid = null, $comparison = null)
	{
		if (is_array($providerid)) {
			$useMinMax = false;
			if (isset($providerid['min'])) {
				$this->addUsingAlias(Buses201101Peer::PROVIDERID, $providerid['min'], Criteria::GREATER_EQUAL);
				$useMinMax = true;
			}
			if (isset($providerid['max'])) {
				$this->addUsingAlias(Buses201101Peer::PROVIDERID, $providerid['max'], Criteria::LESS_EQUAL);
				$useMinMax = true;
			}
			if ($useMinMax) {
				return $this;
			}
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
		}
		return $this->addUsingAlias(Buses201101Peer::PROVIDERID, $providerid, $comparison);
	}

	/**
	 * Filter the query on the carid column
	 *
	 * Example usage:
	 * <code>
	 * $query->filterByCarid(1234); // WHERE carid = 1234
	 * $query->filterByCarid(array(12, 34)); // WHERE carid IN (12, 34)
	 * $query->filterByCarid(array('min' => 12)); // WHERE carid > 12
	 * </code>
	 *
	 * @param     mixed $carid The value to use as filter.
	 *              Use scalar values for equality.
	 *              Use array values for in_array() equivalent.
	 *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    Buses201101Query The current query, for fluid interface
	 */
	public function filterByCarid($carid = null, $comparison = null)
	{
		if (is_array($carid)) {
			$useMinMax = false;
			if (isset($carid['min'])) {
				$this->addUsingAlias(Buses201101Peer::CARID, $carid['min'], Criteria::GREATER_EQUAL);
				$useMinMax = true;
			}
			if (isset($carid['max'])) {
				$this->addUsingAlias(Buses201101Peer::CARID, $carid['max'], Criteria::LESS_EQUAL);
				$useMinMax = true;
			}
			if ($useMinMax) {
				return $this;
			}
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
		}
		return $this->addUsingAlias(Buses201101Peer::CARID, $carid, $comparison);
	}

	/**
	 * Filter the query on the dutystatus column
	 *
	 * Example usage:
	 * <code>
	 * $query->filterByDutystatus(1234); // WHERE dutystatus = 1234
	 * $query->filterByDutystatus(array(12, 34)); // WHERE dutystatus IN (12, 34)
	 * $query->filterByDutystatus(array('min' => 12)); // WHERE dutystatus > 12
	 * </code>
	 *
	 * @param     mixed $dutystatus The value to use as filter.
	 *              Use scalar values for equality.
	 *              Use array values for in_array() equivalent.
	 *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    Buses201101Query The current query, for fluid interface
	 */
	public function filterByDutystatus($dutystatus = null, $comparison = null)
	{
		if (is_array($dutystatus)) {
			$useMinMax = false;
			if (isset($dutystatus['min'])) {
				$this->addUsingAlias(Buses201101Peer::DUTYSTATUS, $dutystatus['min'], Criteria::GREATER_EQUAL);
				$useMinMax = true;
			}
			if (isset($dutystatus['max'])) {
				$this->addUsingAlias(Buses201101Peer::DUTYSTATUS, $dutystatus['max'], Criteria::LESS_EQUAL);
				$useMinMax = true;
			}
			if ($useMinMax) {
				return $this;
			}
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
		}
		return $this->addUsingAlias(Buses201101Peer::DUTYSTATUS, $dutystatus, $comparison);
	}

	/**
	 * Filter the query on the busstatus column
	 *
	 * Example usage:
	 * <code>
	 * $query->filterByBusstatus(1234); // WHERE busstatus = 1234
	 * $query->filterByBusstatus(array(12, 34)); // WHERE busstatus IN (12, 34)
	 * $query->filterByBusstatus(array('min' => 12)); // WHERE busstatus > 12
	 * </code>
	 *
	 * @param     mixed $busstatus The value to use as filter.
	 *              Use scalar values for equality.
	 *              Use array values for in_array() equivalent.
	 *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    Buses201101Query The current query, for fluid interface
	 */
	public function filterByBusstatus($busstatus = null, $comparison = null)
	{
		if (is_array($busstatus)) {
			$useMinMax = false;
			if (isset($busstatus['min'])) {
				$this->addUsingAlias(Buses201101Peer::BUSSTATUS, $busstatus['min'], Criteria::GREATER_EQUAL);
				$useMinMax = true;
			}
			if (isset($busstatus['max'])) {
				$this->addUsingAlias(Buses201101Peer::BUSSTATUS, $busstatus['max'], Criteria::LESS_EQUAL);
				$useMinMax = true;
			}
			if ($useMinMax) {
				return $this;
			}
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
		}
		return $this->addUsingAlias(Buses201101Peer::BUSSTATUS, $busstatus, $comparison);
	}

	/**
	 * Filter the query on the routeid column
	 *
	 * Example usage:
	 * <code>
	 * $query->filterByRouteid(1234); // WHERE routeid = 1234
	 * $query->filterByRouteid(array(12, 34)); // WHERE routeid IN (12, 34)
	 * $query->filterByRouteid(array('min' => 12)); // WHERE routeid > 12
	 * </code>
	 *
	 * @param     mixed $routeid The value to use as filter.
	 *              Use scalar values for equality.
	 *              Use array values for in_array() equivalent.
	 *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    Buses201101Query The current query, for fluid interface
	 */
	public function filterByRouteid($routeid = null, $comparison = null)
	{
		if (is_array($routeid)) {
			$useMinMax = false;
			if (isset($routeid['min'])) {
				$this->addUsingAlias(Buses201101Peer::ROUTEID, $routeid['min'], Criteria::GREATER_EQUAL);
				$useMinMax = true;
			}
			if (isset($routeid['max'])) {
				$this->addUsingAlias(Buses201101Peer::ROUTEID, $routeid['max'], Criteria::LESS_EQUAL);
				$useMinMax = true;
			}
			if ($useMinMax) {
				return $this;
			}
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
		}
		return $this->addUsingAlias(Buses201101Peer::ROUTEID, $routeid, $comparison);
	}

	/**
	 * Filter the query on the goback column
	 *
	 * Example usage:
	 * <code>
	 * $query->filterByGoback(1234); // WHERE goback = 1234
	 * $query->filterByGoback(array(12, 34)); // WHERE goback IN (12, 34)
	 * $query->filterByGoback(array('min' => 12)); // WHERE goback > 12
	 * </code>
	 *
	 * @param     mixed $goback The value to use as filter.
	 *              Use scalar values for equality.
	 *              Use array values for in_array() equivalent.
	 *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    Buses201101Query The current query, for fluid interface
	 */
	public function filterByGoback($goback = null, $comparison = null)
	{
		if (is_array($goback)) {
			$useMinMax = false;
			if (isset($goback['min'])) {
				$this->addUsingAlias(Buses201101Peer::GOBACK, $goback['min'], Criteria::GREATER_EQUAL);
				$useMinMax = true;
			}
			if (isset($goback['max'])) {
				$this->addUsingAlias(Buses201101Peer::GOBACK, $goback['max'], Criteria::LESS_EQUAL);
				$useMinMax = true;
			}
			if ($useMinMax) {
				return $this;
			}
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
		}
		return $this->addUsingAlias(Buses201101Peer::GOBACK, $goback, $comparison);
	}

	/**
	 * Filter the query on the longitude column
	 *
	 * Example usage:
	 * <code>
	 * $query->filterByLongitude(1234); // WHERE longitude = 1234
	 * $query->filterByLongitude(array(12, 34)); // WHERE longitude IN (12, 34)
	 * $query->filterByLongitude(array('min' => 12)); // WHERE longitude > 12
	 * </code>
	 *
	 * @param     mixed $longitude The value to use as filter.
	 *              Use scalar values for equality.
	 *              Use array values for in_array() equivalent.
	 *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    Buses201101Query The current query, for fluid interface
	 */
	public function filterByLongitude($longitude = null, $comparison = null)
	{
		if (is_array($longitude)) {
			$useMinMax = false;
			if (isset($longitude['min'])) {
				$this->addUsingAlias(Buses201101Peer::LONGITUDE, $longitude['min'], Criteria::GREATER_EQUAL);
				$useMinMax = true;
			}
			if (isset($longitude['max'])) {
				$this->addUsingAlias(Buses201101Peer::LONGITUDE, $longitude['max'], Criteria::LESS_EQUAL);
				$useMinMax = true;
			}
			if ($useMinMax) {
				return $this;
			}
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
		}
		return $this->addUsingAlias(Buses201101Peer::LONGITUDE, $longitude, $comparison);
	}

	/**
	 * Filter the query on the latitude column
	 *
	 * Example usage:
	 * <code>
	 * $query->filterByLatitude(1234); // WHERE latitude = 1234
	 * $query->filterByLatitude(array(12, 34)); // WHERE latitude IN (12, 34)
	 * $query->filterByLatitude(array('min' => 12)); // WHERE latitude > 12
	 * </code>
	 *
	 * @param     mixed $latitude The value to use as filter.
	 *              Use scalar values for equality.
	 *              Use array values for in_array() equivalent.
	 *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    Buses201101Query The current query, for fluid interface
	 */
	public function filterByLatitude($latitude = null, $comparison = null)
	{
		if (is_array($latitude)) {
			$useMinMax = false;
			if (isset($latitude['min'])) {
				$this->addUsingAlias(Buses201101Peer::LATITUDE, $latitude['min'], Criteria::GREATER_EQUAL);
				$useMinMax = true;
			}
			if (isset($latitude['max'])) {
				$this->addUsingAlias(Buses201101Peer::LATITUDE, $latitude['max'], Criteria::LESS_EQUAL);
				$useMinMax = true;
			}
			if ($useMinMax) {
				return $this;
			}
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
		}
		return $this->addUsingAlias(Buses201101Peer::LATITUDE, $latitude, $comparison);
	}

	/**
	 * Filter the query on the speed column
	 *
	 * Example usage:
	 * <code>
	 * $query->filterBySpeed(1234); // WHERE speed = 1234
	 * $query->filterBySpeed(array(12, 34)); // WHERE speed IN (12, 34)
	 * $query->filterBySpeed(array('min' => 12)); // WHERE speed > 12
	 * </code>
	 *
	 * @param     mixed $speed The value to use as filter.
	 *              Use scalar values for equality.
	 *              Use array values for in_array() equivalent.
	 *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    Buses201101Query The current query, for fluid interface
	 */
	public function filterBySpeed($speed = null, $comparison = null)
	{
		if (is_array($speed)) {
			$useMinMax = false;
			if (isset($speed['min'])) {
				$this->addUsingAlias(Buses201101Peer::SPEED, $speed['min'], Criteria::GREATER_EQUAL);
				$useMinMax = true;
			}
			if (isset($speed['max'])) {
				$this->addUsingAlias(Buses201101Peer::SPEED, $speed['max'], Criteria::LESS_EQUAL);
				$useMinMax = true;
			}
			if ($useMinMax) {
				return $this;
			}
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
		}
		return $this->addUsingAlias(Buses201101Peer::SPEED, $speed, $comparison);
	}

	/**
	 * Filter the query on the azimuth column
	 *
	 * Example usage:
	 * <code>
	 * $query->filterByAzimuth(1234); // WHERE azimuth = 1234
	 * $query->filterByAzimuth(array(12, 34)); // WHERE azimuth IN (12, 34)
	 * $query->filterByAzimuth(array('min' => 12)); // WHERE azimuth > 12
	 * </code>
	 *
	 * @param     mixed $azimuth The value to use as filter.
	 *              Use scalar values for equality.
	 *              Use array values for in_array() equivalent.
	 *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    Buses201101Query The current query, for fluid interface
	 */
	public function filterByAzimuth($azimuth = null, $comparison = null)
	{
		if (is_array($azimuth)) {
			$useMinMax = false;
			if (isset($azimuth['min'])) {
				$this->addUsingAlias(Buses201101Peer::AZIMUTH, $azimuth['min'], Criteria::GREATER_EQUAL);
				$useMinMax = true;
			}
			if (isset($azimuth['max'])) {
				$this->addUsingAlias(Buses201101Peer::AZIMUTH, $azimuth['max'], Criteria::LESS_EQUAL);
				$useMinMax = true;
			}
			if ($useMinMax) {
				return $this;
			}
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
		}
		return $this->addUsingAlias(Buses201101Peer::AZIMUTH, $azimuth, $comparison);
	}

	/**
	 * Filter the query on the datatime column
	 *
	 * Example usage:
	 * <code>
	 * $query->filterByDatatime('2011-03-14'); // WHERE datatime = '2011-03-14'
	 * $query->filterByDatatime('now'); // WHERE datatime = '2011-03-14'
	 * $query->filterByDatatime(array('max' => 'yesterday')); // WHERE datatime > '2011-03-13'
	 * </code>
	 *
	 * @param     mixed $datatime The value to use as filter.
	 *              Values can be integers (unix timestamps), DateTime objects, or strings.
	 *              Empty strings are treated as NULL.
	 *              Use scalar values for equality.
	 *              Use array values for in_array() equivalent.
	 *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    Buses201101Query The current query, for fluid interface
	 */
	public function filterByDatatime($datatime = null, $comparison = null)
	{
		if (is_array($datatime)) {
			$useMinMax = false;
			if (isset($datatime['min'])) {
				$this->addUsingAlias(Buses201101Peer::DATATIME, $datatime['min'], Criteria::GREATER_EQUAL);
				$useMinMax = true;
			}
			if (isset($datatime['max'])) {
				$this->addUsingAlias(Buses201101Peer::DATATIME, $datatime['max'], Criteria::LESS_EQUAL);
				$useMinMax = true;
			}
			if ($useMinMax) {
				return $this;
			}
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
		}
		return $this->addUsingAlias(Buses201101Peer::DATATIME, $datatime, $comparison);
	}

	/**
	 * Exclude object from result
	 *
	 * @param     Buses201101 $buses201101 Object to remove from the list of results
	 *
	 * @return    Buses201101Query The current query, for fluid interface
	 */
	public function prune($buses201101 = null)
	{
		if ($buses201101) {
			$this->addUsingAlias(Buses201101Peer::ID, $buses201101->getId(), Criteria::NOT_EQUAL);
		}

		return $this;
	}

} // BaseBuses201101Query