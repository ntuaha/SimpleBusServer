<?php


/**
 * Base class that represents a query for the 'providers_2011' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.6.3 on:
 *
 * Wed Jan 11 23:40:55 2012
 *
 * @method     Providers2011Query orderById($order = Criteria::ASC) Order by the id column
 * @method     Providers2011Query orderByProviderid($order = Criteria::ASC) Order by the providerid column
 * @method     Providers2011Query orderByNamezn($order = Criteria::ASC) Order by the namezn column
 * @method     Providers2011Query orderByNameen($order = Criteria::ASC) Order by the nameen column
 * @method     Providers2011Query orderByEmail($order = Criteria::ASC) Order by the email column
 * @method     Providers2011Query orderByPhoneinfo($order = Criteria::ASC) Order by the phoneinfo column
 * @method     Providers2011Query orderByStationid($order = Criteria::ASC) Order by the stationid column
 * @method     Providers2011Query orderByStationnamezn($order = Criteria::ASC) Order by the stationnamezn column
 * @method     Providers2011Query orderByStationnameen($order = Criteria::ASC) Order by the stationnameen column
 * @method     Providers2011Query orderByType($order = Criteria::ASC) Order by the type column
 *
 * @method     Providers2011Query groupById() Group by the id column
 * @method     Providers2011Query groupByProviderid() Group by the providerid column
 * @method     Providers2011Query groupByNamezn() Group by the namezn column
 * @method     Providers2011Query groupByNameen() Group by the nameen column
 * @method     Providers2011Query groupByEmail() Group by the email column
 * @method     Providers2011Query groupByPhoneinfo() Group by the phoneinfo column
 * @method     Providers2011Query groupByStationid() Group by the stationid column
 * @method     Providers2011Query groupByStationnamezn() Group by the stationnamezn column
 * @method     Providers2011Query groupByStationnameen() Group by the stationnameen column
 * @method     Providers2011Query groupByType() Group by the type column
 *
 * @method     Providers2011Query leftJoin($relation) Adds a LEFT JOIN clause to the query
 * @method     Providers2011Query rightJoin($relation) Adds a RIGHT JOIN clause to the query
 * @method     Providers2011Query innerJoin($relation) Adds a INNER JOIN clause to the query
 *
 * @method     Providers2011 findOne(PropelPDO $con = null) Return the first Providers2011 matching the query
 * @method     Providers2011 findOneOrCreate(PropelPDO $con = null) Return the first Providers2011 matching the query, or a new Providers2011 object populated from the query conditions when no match is found
 *
 * @method     Providers2011 findOneById(string $id) Return the first Providers2011 filtered by the id column
 * @method     Providers2011 findOneByProviderid(int $providerid) Return the first Providers2011 filtered by the providerid column
 * @method     Providers2011 findOneByNamezn(string $namezn) Return the first Providers2011 filtered by the namezn column
 * @method     Providers2011 findOneByNameen(string $nameen) Return the first Providers2011 filtered by the nameen column
 * @method     Providers2011 findOneByEmail(string $email) Return the first Providers2011 filtered by the email column
 * @method     Providers2011 findOneByPhoneinfo(string $phoneinfo) Return the first Providers2011 filtered by the phoneinfo column
 * @method     Providers2011 findOneByStationid(int $stationid) Return the first Providers2011 filtered by the stationid column
 * @method     Providers2011 findOneByStationnamezn(string $stationnamezn) Return the first Providers2011 filtered by the stationnamezn column
 * @method     Providers2011 findOneByStationnameen(string $stationnameen) Return the first Providers2011 filtered by the stationnameen column
 * @method     Providers2011 findOneByType(int $type) Return the first Providers2011 filtered by the type column
 *
 * @method     array findById(string $id) Return Providers2011 objects filtered by the id column
 * @method     array findByProviderid(int $providerid) Return Providers2011 objects filtered by the providerid column
 * @method     array findByNamezn(string $namezn) Return Providers2011 objects filtered by the namezn column
 * @method     array findByNameen(string $nameen) Return Providers2011 objects filtered by the nameen column
 * @method     array findByEmail(string $email) Return Providers2011 objects filtered by the email column
 * @method     array findByPhoneinfo(string $phoneinfo) Return Providers2011 objects filtered by the phoneinfo column
 * @method     array findByStationid(int $stationid) Return Providers2011 objects filtered by the stationid column
 * @method     array findByStationnamezn(string $stationnamezn) Return Providers2011 objects filtered by the stationnamezn column
 * @method     array findByStationnameen(string $stationnameen) Return Providers2011 objects filtered by the stationnameen column
 * @method     array findByType(int $type) Return Providers2011 objects filtered by the type column
 *
 * @package    propel.generator.lib.model.om
 */
abstract class BaseProviders2011Query extends ModelCriteria
{
	
	/**
	 * Initializes internal state of BaseProviders2011Query object.
	 *
	 * @param     string $dbName The dabase name
	 * @param     string $modelName The phpName of a model, e.g. 'Book'
	 * @param     string $modelAlias The alias for the model in this query, e.g. 'b'
	 */
	public function __construct($dbName = 'propel', $modelName = 'Providers2011', $modelAlias = null)
	{
		parent::__construct($dbName, $modelName, $modelAlias);
	}

	/**
	 * Returns a new Providers2011Query object.
	 *
	 * @param     string $modelAlias The alias of a model in the query
	 * @param     Criteria $criteria Optional Criteria to build the query from
	 *
	 * @return    Providers2011Query
	 */
	public static function create($modelAlias = null, $criteria = null)
	{
		if ($criteria instanceof Providers2011Query) {
			return $criteria;
		}
		$query = new Providers2011Query();
		if (null !== $modelAlias) {
			$query->setModelAlias($modelAlias);
		}
		if ($criteria instanceof Criteria) {
			$query->mergeWith($criteria);
		}
		return $query;
	}

	/**
	 * Find object by primary key.
	 * Propel uses the instance pool to skip the database if the object exists.
	 * Go fast if the query is untouched.
	 *
	 * <code>
	 * $obj  = $c->findPk(12, $con);
	 * </code>
	 *
	 * @param     mixed $key Primary key to use for the query
	 * @param     PropelPDO $con an optional connection object
	 *
	 * @return    Providers2011|array|mixed the result, formatted by the current formatter
	 */
	public function findPk($key, $con = null)
	{
		if ($key === null) {
			return null;
		}
		if ((null !== ($obj = Providers2011Peer::getInstanceFromPool((string) $key))) && !$this->formatter) {
			// the object is alredy in the instance pool
			return $obj;
		}
		if ($con === null) {
			$con = Propel::getConnection(Providers2011Peer::DATABASE_NAME, Propel::CONNECTION_READ);
		}
		$this->basePreSelect($con);
		if ($this->formatter || $this->modelAlias || $this->with || $this->select
		 || $this->selectColumns || $this->asColumns || $this->selectModifiers
		 || $this->map || $this->having || $this->joins) {
			return $this->findPkComplex($key, $con);
		} else {
			return $this->findPkSimple($key, $con);
		}
	}

	/**
	 * Find object by primary key using raw SQL to go fast.
	 * Bypass doSelect() and the object formatter by using generated code.
	 *
	 * @param     mixed $key Primary key to use for the query
	 * @param     PropelPDO $con A connection object
	 *
	 * @return    Providers2011 A model object, or null if the key is not found
	 */
	protected function findPkSimple($key, $con)
	{
		$sql = 'SELECT ID, PROVIDERID, NAMEZN, NAMEEN, EMAIL, PHONEINFO, STATIONID, STATIONNAMEZN, STATIONNAMEEN, TYPE FROM providers_2011 WHERE ID = :p0';
		try {
			$stmt = $con->prepare($sql);
			$stmt->bindValue(':p0', $key, PDO::PARAM_INT);
			$stmt->execute();
		} catch (Exception $e) {
			Propel::log($e->getMessage(), Propel::LOG_ERR);
			throw new PropelException(sprintf('Unable to execute SELECT statement [%s]', $sql), $e);
		}
		$obj = null;
		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$obj = new Providers2011();
			$obj->hydrate($row);
			Providers2011Peer::addInstanceToPool($obj, (string) $row[0]);
		}
		$stmt->closeCursor();

		return $obj;
	}

	/**
	 * Find object by primary key.
	 *
	 * @param     mixed $key Primary key to use for the query
	 * @param     PropelPDO $con A connection object
	 *
	 * @return    Providers2011|array|mixed the result, formatted by the current formatter
	 */
	protected function findPkComplex($key, $con)
	{
		// As the query uses a PK condition, no limit(1) is necessary.
		$criteria = $this->isKeepQuery() ? clone $this : $this;
		$stmt = $criteria
			->filterByPrimaryKey($key)
			->doSelect($con);
		return $criteria->getFormatter()->init($criteria)->formatOne($stmt);
	}

	/**
	 * Find objects by primary key
	 * <code>
	 * $objs = $c->findPks(array(12, 56, 832), $con);
	 * </code>
	 * @param     array $keys Primary keys to use for the query
	 * @param     PropelPDO $con an optional connection object
	 *
	 * @return    PropelObjectCollection|array|mixed the list of results, formatted by the current formatter
	 */
	public function findPks($keys, $con = null)
	{
		if ($con === null) {
			$con = Propel::getConnection($this->getDbName(), Propel::CONNECTION_READ);
		}
		$this->basePreSelect($con);
		$criteria = $this->isKeepQuery() ? clone $this : $this;
		$stmt = $criteria
			->filterByPrimaryKeys($keys)
			->doSelect($con);
		return $criteria->getFormatter()->init($criteria)->format($stmt);
	}

	/**
	 * Filter the query by primary key
	 *
	 * @param     mixed $key Primary key to use for the query
	 *
	 * @return    Providers2011Query The current query, for fluid interface
	 */
	public function filterByPrimaryKey($key)
	{
		return $this->addUsingAlias(Providers2011Peer::ID, $key, Criteria::EQUAL);
	}

	/**
	 * Filter the query by a list of primary keys
	 *
	 * @param     array $keys The list of primary key to use for the query
	 *
	 * @return    Providers2011Query The current query, for fluid interface
	 */
	public function filterByPrimaryKeys($keys)
	{
		return $this->addUsingAlias(Providers2011Peer::ID, $keys, Criteria::IN);
	}

	/**
	 * Filter the query on the id column
	 *
	 * Example usage:
	 * <code>
	 * $query->filterById(1234); // WHERE id = 1234
	 * $query->filterById(array(12, 34)); // WHERE id IN (12, 34)
	 * $query->filterById(array('min' => 12)); // WHERE id > 12
	 * </code>
	 *
	 * @param     mixed $id The value to use as filter.
	 *              Use scalar values for equality.
	 *              Use array values for in_array() equivalent.
	 *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    Providers2011Query The current query, for fluid interface
	 */
	public function filterById($id = null, $comparison = null)
	{
		if (is_array($id) && null === $comparison) {
			$comparison = Criteria::IN;
		}
		return $this->addUsingAlias(Providers2011Peer::ID, $id, $comparison);
	}

	/**
	 * Filter the query on the providerid column
	 *
	 * Example usage:
	 * <code>
	 * $query->filterByProviderid(1234); // WHERE providerid = 1234
	 * $query->filterByProviderid(array(12, 34)); // WHERE providerid IN (12, 34)
	 * $query->filterByProviderid(array('min' => 12)); // WHERE providerid > 12
	 * </code>
	 *
	 * @param     mixed $providerid The value to use as filter.
	 *              Use scalar values for equality.
	 *              Use array values for in_array() equivalent.
	 *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    Providers2011Query The current query, for fluid interface
	 */
	public function filterByProviderid($providerid = null, $comparison = null)
	{
		if (is_array($providerid)) {
			$useMinMax = false;
			if (isset($providerid['min'])) {
				$this->addUsingAlias(Providers2011Peer::PROVIDERID, $providerid['min'], Criteria::GREATER_EQUAL);
				$useMinMax = true;
			}
			if (isset($providerid['max'])) {
				$this->addUsingAlias(Providers2011Peer::PROVIDERID, $providerid['max'], Criteria::LESS_EQUAL);
				$useMinMax = true;
			}
			if ($useMinMax) {
				return $this;
			}
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
		}
		return $this->addUsingAlias(Providers2011Peer::PROVIDERID, $providerid, $comparison);
	}

	/**
	 * Filter the query on the namezn column
	 *
	 * Example usage:
	 * <code>
	 * $query->filterByNamezn('fooValue');   // WHERE namezn = 'fooValue'
	 * $query->filterByNamezn('%fooValue%'); // WHERE namezn LIKE '%fooValue%'
	 * </code>
	 *
	 * @param     string $namezn The value to use as filter.
	 *              Accepts wildcards (* and % trigger a LIKE)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    Providers2011Query The current query, for fluid interface
	 */
	public function filterByNamezn($namezn = null, $comparison = null)
	{
		if (null === $comparison) {
			if (is_array($namezn)) {
				$comparison = Criteria::IN;
			} elseif (preg_match('/[\%\*]/', $namezn)) {
				$namezn = str_replace('*', '%', $namezn);
				$comparison = Criteria::LIKE;
			}
		}
		return $this->addUsingAlias(Providers2011Peer::NAMEZN, $namezn, $comparison);
	}

	/**
	 * Filter the query on the nameen column
	 *
	 * Example usage:
	 * <code>
	 * $query->filterByNameen('fooValue');   // WHERE nameen = 'fooValue'
	 * $query->filterByNameen('%fooValue%'); // WHERE nameen LIKE '%fooValue%'
	 * </code>
	 *
	 * @param     string $nameen The value to use as filter.
	 *              Accepts wildcards (* and % trigger a LIKE)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    Providers2011Query The current query, for fluid interface
	 */
	public function filterByNameen($nameen = null, $comparison = null)
	{
		if (null === $comparison) {
			if (is_array($nameen)) {
				$comparison = Criteria::IN;
			} elseif (preg_match('/[\%\*]/', $nameen)) {
				$nameen = str_replace('*', '%', $nameen);
				$comparison = Criteria::LIKE;
			}
		}
		return $this->addUsingAlias(Providers2011Peer::NAMEEN, $nameen, $comparison);
	}

	/**
	 * Filter the query on the email column
	 *
	 * Example usage:
	 * <code>
	 * $query->filterByEmail('fooValue');   // WHERE email = 'fooValue'
	 * $query->filterByEmail('%fooValue%'); // WHERE email LIKE '%fooValue%'
	 * </code>
	 *
	 * @param     string $email The value to use as filter.
	 *              Accepts wildcards (* and % trigger a LIKE)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    Providers2011Query The current query, for fluid interface
	 */
	public function filterByEmail($email = null, $comparison = null)
	{
		if (null === $comparison) {
			if (is_array($email)) {
				$comparison = Criteria::IN;
			} elseif (preg_match('/[\%\*]/', $email)) {
				$email = str_replace('*', '%', $email);
				$comparison = Criteria::LIKE;
			}
		}
		return $this->addUsingAlias(Providers2011Peer::EMAIL, $email, $comparison);
	}

	/**
	 * Filter the query on the phoneinfo column
	 *
	 * Example usage:
	 * <code>
	 * $query->filterByPhoneinfo('fooValue');   // WHERE phoneinfo = 'fooValue'
	 * $query->filterByPhoneinfo('%fooValue%'); // WHERE phoneinfo LIKE '%fooValue%'
	 * </code>
	 *
	 * @param     string $phoneinfo The value to use as filter.
	 *              Accepts wildcards (* and % trigger a LIKE)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    Providers2011Query The current query, for fluid interface
	 */
	public function filterByPhoneinfo($phoneinfo = null, $comparison = null)
	{
		if (null === $comparison) {
			if (is_array($phoneinfo)) {
				$comparison = Criteria::IN;
			} elseif (preg_match('/[\%\*]/', $phoneinfo)) {
				$phoneinfo = str_replace('*', '%', $phoneinfo);
				$comparison = Criteria::LIKE;
			}
		}
		return $this->addUsingAlias(Providers2011Peer::PHONEINFO, $phoneinfo, $comparison);
	}

	/**
	 * Filter the query on the stationid column
	 *
	 * Example usage:
	 * <code>
	 * $query->filterByStationid(1234); // WHERE stationid = 1234
	 * $query->filterByStationid(array(12, 34)); // WHERE stationid IN (12, 34)
	 * $query->filterByStationid(array('min' => 12)); // WHERE stationid > 12
	 * </code>
	 *
	 * @param     mixed $stationid The value to use as filter.
	 *              Use scalar values for equality.
	 *              Use array values for in_array() equivalent.
	 *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    Providers2011Query The current query, for fluid interface
	 */
	public function filterByStationid($stationid = null, $comparison = null)
	{
		if (is_array($stationid)) {
			$useMinMax = false;
			if (isset($stationid['min'])) {
				$this->addUsingAlias(Providers2011Peer::STATIONID, $stationid['min'], Criteria::GREATER_EQUAL);
				$useMinMax = true;
			}
			if (isset($stationid['max'])) {
				$this->addUsingAlias(Providers2011Peer::STATIONID, $stationid['max'], Criteria::LESS_EQUAL);
				$useMinMax = true;
			}
			if ($useMinMax) {
				return $this;
			}
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
		}
		return $this->addUsingAlias(Providers2011Peer::STATIONID, $stationid, $comparison);
	}

	/**
	 * Filter the query on the stationnamezn column
	 *
	 * Example usage:
	 * <code>
	 * $query->filterByStationnamezn('fooValue');   // WHERE stationnamezn = 'fooValue'
	 * $query->filterByStationnamezn('%fooValue%'); // WHERE stationnamezn LIKE '%fooValue%'
	 * </code>
	 *
	 * @param     string $stationnamezn The value to use as filter.
	 *              Accepts wildcards (* and % trigger a LIKE)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    Providers2011Query The current query, for fluid interface
	 */
	public function filterByStationnamezn($stationnamezn = null, $comparison = null)
	{
		if (null === $comparison) {
			if (is_array($stationnamezn)) {
				$comparison = Criteria::IN;
			} elseif (preg_match('/[\%\*]/', $stationnamezn)) {
				$stationnamezn = str_replace('*', '%', $stationnamezn);
				$comparison = Criteria::LIKE;
			}
		}
		return $this->addUsingAlias(Providers2011Peer::STATIONNAMEZN, $stationnamezn, $comparison);
	}

	/**
	 * Filter the query on the stationnameen column
	 *
	 * Example usage:
	 * <code>
	 * $query->filterByStationnameen('fooValue');   // WHERE stationnameen = 'fooValue'
	 * $query->filterByStationnameen('%fooValue%'); // WHERE stationnameen LIKE '%fooValue%'
	 * </code>
	 *
	 * @param     string $stationnameen The value to use as filter.
	 *              Accepts wildcards (* and % trigger a LIKE)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    Providers2011Query The current query, for fluid interface
	 */
	public function filterByStationnameen($stationnameen = null, $comparison = null)
	{
		if (null === $comparison) {
			if (is_array($stationnameen)) {
				$comparison = Criteria::IN;
			} elseif (preg_match('/[\%\*]/', $stationnameen)) {
				$stationnameen = str_replace('*', '%', $stationnameen);
				$comparison = Criteria::LIKE;
			}
		}
		return $this->addUsingAlias(Providers2011Peer::STATIONNAMEEN, $stationnameen, $comparison);
	}

	/**
	 * Filter the query on the type column
	 *
	 * Example usage:
	 * <code>
	 * $query->filterByType(1234); // WHERE type = 1234
	 * $query->filterByType(array(12, 34)); // WHERE type IN (12, 34)
	 * $query->filterByType(array('min' => 12)); // WHERE type > 12
	 * </code>
	 *
	 * @param     mixed $type The value to use as filter.
	 *              Use scalar values for equality.
	 *              Use array values for in_array() equivalent.
	 *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    Providers2011Query The current query, for fluid interface
	 */
	public function filterByType($type = null, $comparison = null)
	{
		if (is_array($type)) {
			$useMinMax = false;
			if (isset($type['min'])) {
				$this->addUsingAlias(Providers2011Peer::TYPE, $type['min'], Criteria::GREATER_EQUAL);
				$useMinMax = true;
			}
			if (isset($type['max'])) {
				$this->addUsingAlias(Providers2011Peer::TYPE, $type['max'], Criteria::LESS_EQUAL);
				$useMinMax = true;
			}
			if ($useMinMax) {
				return $this;
			}
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
		}
		return $this->addUsingAlias(Providers2011Peer::TYPE, $type, $comparison);
	}

	/**
	 * Exclude object from result
	 *
	 * @param     Providers2011 $providers2011 Object to remove from the list of results
	 *
	 * @return    Providers2011Query The current query, for fluid interface
	 */
	public function prune($providers2011 = null)
	{
		if ($providers2011) {
			$this->addUsingAlias(Providers2011Peer::ID, $providers2011->getId(), Criteria::NOT_EQUAL);
		}

		return $this;
	}

} // BaseProviders2011Query